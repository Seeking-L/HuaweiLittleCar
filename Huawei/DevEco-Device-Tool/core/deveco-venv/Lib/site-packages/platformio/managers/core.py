# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

from platformio import exception
from platformio.compat import PY2
from platformio.managers.package import PackageManager
from platformio.project.config import ProjectConfig
from platformio.util import read_url_json


python_version = "%d%d" % (sys.version_info.major, sys.version_info.minor)

CORE_PACKAGES = {
    "deveco-home": "*",
}

# pylint: disable=arguments-differ,signature-differs


class CorePackageManager(PackageManager):
    def __init__(self, project_dirs=None):
        config = ProjectConfig.get_instance()
        packages_dir = config.get_optional_dir("packages")
        packages_url = read_url_json()
        dl_package_url = packages_url.get('dl_package_url', '')
        dl_platformio_packages_s_url = packages_url.get('dl_platformio_packages_s_url', '')
        dl_platformio_packages_url = packages_url.get('dl_platformio_packages_url', '')
        super(CorePackageManager, self).__init__(
            packages_dir,
            [
                dl_package_url,
                dl_platformio_packages_url if sys.version_info < (2, 7, 9) else dl_platformio_packages_s_url
            ],
            project_dirs
        )

    def install(  # pylint: disable=keyword-arg-before-vararg
        self, name, requirements=None, *args, **kwargs
    ):
        PackageManager.install(self, name, requirements, *args, **kwargs)
        self.cleanup_packages()
        return self.get_package_dir(name, requirements)

    def update(self, *args, **kwargs):
        result = PackageManager.update(self, *args, **kwargs)
        self.cleanup_packages()
        return result

    def cleanup_packages(self):
        self.cache_reset()
        best_pkg_versions = {}
        for name, requirements in CORE_PACKAGES.items():
            pkg_dir = self.get_package_dir(name, requirements)
            if not pkg_dir:
                continue
            best_pkg_versions[name] = self.load_manifest(pkg_dir)["version"]
        for manifest in self.get_installed():
            if manifest["name"] not in best_pkg_versions:
                continue
            if manifest["version"] != best_pkg_versions[manifest["name"]]:
                self.uninstall(manifest["__pkg_dir"], after_update=True)
        self.cache_reset()
        return True


def get_core_package_dir(name):
    if name not in CORE_PACKAGES:
        raise exception.PlatformioException("Please upgrade DevEco Core")
    requirements = CORE_PACKAGES[name]
    pm = CorePackageManager()
    pkg_dir = pm.get_package_dir(name, requirements)
    if pkg_dir:
        return pkg_dir
    return pm.install(name, requirements)


def update_core_packages(only_check=False, silent=False):
    pm = CorePackageManager()
    for name, requirements in CORE_PACKAGES.items():
        pkg_dir = pm.get_package_dir(name)
        if not pkg_dir:
            continue
        if not silent or pm.outdated(pkg_dir, requirements):
            pm.update(name, requirements, only_check=only_check)
    return True
