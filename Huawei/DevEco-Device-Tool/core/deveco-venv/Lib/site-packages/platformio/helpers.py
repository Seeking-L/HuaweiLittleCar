#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
Description:
Create: 2021-08-23
"""

import os
import re
import json
from urllib.parse import urlparse
from platformio.compat import WINDOWS
from configparser import RawConfigParser
from configparser import NoSectionError

_UNSET = object()


def get_config_json_path():
    return os.path.join(os.path.expanduser("~"), ".deveco-device-tool")


def get_installed_core_path():
    try:
        path = os.path.join(get_config_json_path(), "settings.json")
        with open(path, 'r', encoding="UTF-8") as f:
            path_dict = json.loads(f.read())
        if path_dict:
            return path_dict.get("path")
    except FileNotFoundError:
        return os.path.expanduser("~")
    return os.path.expanduser("~")


def get_installed_path():
    path = get_installed_core_path()
    installer_path = path.split(os.path.join(os.sep, path.rsplit(os.sep)[-1]))[0]
    return installer_path


def get_platformio_packages_path():
    return os.path.join(get_installed_core_path(), "core")


def get_executable_path():
    vnv = os.path.join(get_platformio_packages_path(), "deveco-venv")
    return os.path.join(vnv, 'Scripts', 'hos.exe') \
        if WINDOWS else os.path.join(vnv, 'bin', 'hos')


def get_remote_executable_path(remote_os):
    if remote_os.lower() == 'linux':
        return os.path.join(get_installed_core_path(), "/core/deveco-venv/bin/hos")
    return os.path.join(get_installed_core_path(), "/core/deveco-venv/Scripts/hos.exe")


def get_user_is_agreement():
    home_state = os.path.join(get_config_json_path(), "homestate.json")
    with open(home_state, 'r') as f:
        is_agreement = json.load(f).get("storage").get("agreement_label")
    return is_agreement


def get_user_package():
    user_package_path = os.path.join(get_config_json_path(), 'user-packages.json')
    return json.load(open(user_package_path, 'r'))


def get_upload_tool_path():
    return os.path.join(get_config_json_path(), "upload_tools")


def get_upload_tool_zip_path():
    return os.path.join(get_upload_tool_path(), "tools_zip")


def get_suite_json_path(project_dir, product):
    suite_dir =  os.path.join(project_dir, '.deveco', 'suite_json')
    if not os.path.exists(suite_dir):
        os.mkdir(suite_dir)
    return os.path.join(suite_dir, f'{re.sub("[@/]", ".", product)}')


def cal_relative_path(origin_path, ref_path):
    if not origin_path.startswith(ref_path):
        return origin_path
    else:
        return origin_path.replace(ref_path + ('' if ref_path.endswith('/') else '/'), '')


def is_deveco_project(project_dir):
    return os.path.exists(os.path.join(project_dir, '.deveco', 'deveco.ini'))


def url_to_domain(url):
    return urlparse(url).hostname


class DevecoRawConfigParser(RawConfigParser):
    def get_dict(self, section, vars=None, fallback=_UNSET):
        """Get an dict for a given section.
        """
        try:
            d = self._unify_values(section, vars)
        except NoSectionError:
            if fallback is _UNSET:
                raise
            else:
                return fallback

        def handler_value(item):
            k, v = item
            if not re.match('\d', v):
                return k, v
            try:
                v = int(v)
            except ValueError:
                v = eval(v)
            return k, v

        return dict(map(handler_value, dict(d).items()))


def get_logger_config():
    config = DevecoRawConfigParser()
    config_path = os.path.join(get_platformio_packages_path(), 'log.ini')
    # Shared Installation
    if not os.path.exists(config_path):
        return {
            'file':'deveco.log',
            'when':'D',
            'backup_count':7,
            "folder": os.path.join(get_config_json_path(), 'logs', 'deveco-core'),
            "max_bytes": 5*1024**2,
            "formatter": "%(asctime)s - %(levelname)s - %(message)s"
        }
    config.read(config_path)
    log_config = config.get_dict('config')
    if not log_config.get("folder"):
        log_config.update({
            "folder": os.path.join(get_config_json_path(), 'logs', 'deveco-core')
        })
    return log_config

def get_compile_log_config():
    """
    Log configuration file compiled by the DevCo project
    """
    config = DevecoRawConfigParser()
    config.read(os.path.join(get_platformio_packages_path(), 'log.ini'))
    log_config = config.get_dict('compile')
    return log_config