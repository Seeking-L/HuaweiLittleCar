# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=redefined-builtin, too-many-arguments, too-many-lines

import os
from collections import OrderedDict

import click
from platformio.helpers import get_installed_core_path, get_config_json_path


class ConfigOption(object):  # pylint: disable=too-many-instance-attributes
    def __init__(
        self,
        scope,
        group,
        name,
        description,
        type=str,
        multiple=False,
        sysenvvar=None,
        buildenvvar=None,
        oldnames=None,
        default=None,
        visible=False,
        disabled=False,
        readonly=False,
        platform=None,
    ):
        self.scope = scope
        self.group = group
        self.name = name
        self.description = description
        self.type = type
        self.multiple = multiple
        self.sysenvvar = sysenvvar
        self.buildenvvar = buildenvvar
        self.oldnames = oldnames
        self.default = default
        self.visible = visible
        self.disabled = disabled
        self.readonly = readonly
        self.platform = platform

    def as_dict(self):
        result = dict(
            scope=self.scope,
            group=self.group,
            name=self.name,
            description=self.description,
            type="string",
            multiple=self.multiple,
            sysenvvar=self.sysenvvar,
            default=self.default,
            visible=self.visible,
            disabled=self.disabled,
            readonly=self.readonly,
            platform=self.platform,
        )
        if isinstance(self.type, click.ParamType):
            result["type"] = self.type.name

        if isinstance(self.type, (click.IntRange, click.FloatRange)):
            result["min"] = self.type.min
            result["max"] = self.type.max
        if isinstance(self.type, click.Choice):
            result["choices"] = self.type.choices

        return result


def ConfigPlatformioOption(*args, **kwargs):
    return ConfigOption("deveco", *args, **kwargs)


def ConfigEnvOption(*args, **kwargs):
    return ConfigOption("env", *args, **kwargs)


def ConfigPartitionOption(*args, **kwargs):
    return ConfigOption("partition", *args, **kwargs)


PROJECT_OPTIONS_LISTS = [
    #
    # deveco
    #
    ConfigPlatformioOption(
        group="generic",
        name="description",
        description="Describe a project with a short information",
    ),
    ConfigPlatformioOption(
        group="generic",
        name="default_envs",
        description=(
            "Configure a list with environments which DevEco should "
            "process by default"
        ),
        oldnames=["env_default"],
        multiple=True,
        sysenvvar="PLATFORMIO_DEFAULT_ENVS",
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="generic",
        name="extra_configs",
        description=(
            "Extend main configuration with the extra configuration files"
        ),
        multiple=True,
        disabled=True,
    ),
    # Dirs
    ConfigPlatformioOption(
        group="directory",
        name="core_dir",
        description=(
            "DevEco Core location where it keeps installed development "
            "platforms, packages, global libraries, "
            "and other internal information"
        ),
        oldnames=["home_dir"],
        sysenvvar="PLATFORMIO_CORE_DIR",
        default=get_installed_core_path(),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="globallib_dir",
        description=(
            "A library folder/storage where DevEco Library Dependency "
            "Finder (LDF) looks for global libraries"
        ),
        sysenvvar="PLATFORMIO_GLOBALLIB_DIR",
        default=os.path.join("$PROJECT_CORE_DIR", "lib"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="platforms_dir",
        description=(
            "A location where DevEco Core keeps installed development "
            "platforms"
        ),
        sysenvvar="PLATFORMIO_PLATFORMS_DIR",
        default=os.path.join("$PROJECT_CORE_DIR", "platforms"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="packages_dir",
        description=(
            "A location where DevEco Core keeps installed packages"
        ),
        sysenvvar="PLATFORMIO_PACKAGES_DIR",
        default=os.path.join("$PROJECT_CORE_DIR", "core"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="cache_dir",
        description=(
            "A location where DevEco Core stores caching information "
            "(requests to DevEco Registry, downloaded packages and "
            "other service information)"
        ),
        sysenvvar="PLATFORMIO_CACHE_DIR",
        default=os.path.join(get_config_json_path(), ".cache"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="build_cache_dir",
        description=(
            "A location where DevEco Core keeps derived files from a "
            "build system (objects, firmwares, ELFs) and caches them between "
            "build environments"
        ),
        sysenvvar="PLATFORMIO_BUILD_CACHE_DIR",
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="workspace_dir",
        description=(
            "A path to a project workspace directory where DevEco keeps "
            "by default compiled objects, static libraries, firmwares, and "
            "external library dependencies"
        ),
        sysenvvar="PLATFORMIO_WORKSPACE_DIR",
        default=os.path.join("$PROJECT_DIR", ".deveco"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="build_dir",
        description=(
            "DevEco Build System uses this folder for project environments"
            " to store compiled object files, static libraries, firmwares, "
            "and other cached information"
        ),
        sysenvvar="PLATFORMIO_BUILD_DIR",
        default=os.path.join("$PROJECT_WORKSPACE_DIR", "build"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="libdeps_dir",
        description=(
            "Internal storage where Library Manager will install project "
            "dependencies declared via `lib_deps` option"
        ),
        sysenvvar="PLATFORMIO_LIBDEPS_DIR",
        default=os.path.join("$PROJECT_WORKSPACE_DIR", "libdeps"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="include_dir",
        description=(
            "A default location for project header files. DevEco Build "
            "System automatically adds this path to CPPPATH scope"
        ),
        sysenvvar="PLATFORMIO_INCLUDE_DIR",
        default=os.path.join("$PROJECT_DIR", "include"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="src_dir",
        description=(
            "A default location where DevEco Build System looks for the "
            "project C/C++ source files"
        ),
        sysenvvar="PLATFORMIO_SRC_DIR",
        default=os.path.join("$PROJECT_DIR", "src"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="lib_dir",
        description="A storage for the custom/private project libraries",
        sysenvvar="PLATFORMIO_LIB_DIR",
        default=os.path.join("$PROJECT_DIR", "lib"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="data_dir",
        description=(
            "A data directory to store contents which can be uploaded to "
            "file system (SPIFFS, etc.)"
        ),
        sysenvvar="PLATFORMIO_DATA_DIR",
        default=os.path.join("$PROJECT_DIR", "data"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="test_dir",
        description=(
            "A location where hos Unit Testing engine looks for "
            "test source files"
        ),
        sysenvvar="PLATFORMIO_TEST_DIR",
        default=os.path.join("$PROJECT_DIR", "test"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="boards_dir",
        description="A global storage for custom board manifests",
        sysenvvar="PLATFORMIO_BOARDS_DIR",
        default=os.path.join("$PROJECT_DIR", "boards"),
        disabled=True,
    ),
    ConfigPlatformioOption(
        group="directory",
        name="shared_dir",
        description=(
            "A location which DevEco Remote uses to synchronize extra files "
            "between remote machines"
        ),
        sysenvvar="PLATFORMIO_SHARED_DIR",
        default=os.path.join("$PROJECT_DIR", "shared"),
        disabled=True,
    ),
    #
    # env
    #
    # Platform
    # default values of main options for project init
    ConfigEnvOption(
        group="platform",
        name="default_options",
        description="A list of default options values for project creation",
        default=["platform = hisilicon",
                    "board =",
                    "build_type = debug",
                    "upload_port =",
                    "upload_protocol =",
                    "upload_net_server_ip =",
                    "upload_net_client_mask =",
                    "upload_net_client_gw =",
                    "upload_net_client_ip =",
                    "debug_client =",
                    "debug_extra_cmds = "
                    ],
        disabled=True
    ),
    ConfigEnvOption(
        group="platform",
        name="platform",
        description="A name or specification of development platform",
        buildenvvar="PIOPLATFORM",
        visible=True,
        readonly=True,
    ),
    ConfigEnvOption(
        group="platform",
        name="platform_packages",
        description="Custom packages and specifications",
        multiple=True,
    ),
    # Board
    ConfigEnvOption(
        group="platform",
        name="series_name",
        description="mcu series name",
        visible=True,
        readonly=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="platform",
        name="board",
        description="A board ID",
        buildenvvar="BOARD",
        visible=True,
        readonly=True,
    ),
    ConfigEnvOption(
        group="platform",
        name="framework",
        description="A list of project dependent frameworks",
        multiple=True,
        buildenvvar="PIOFRAMEWORK",
        readonly=True,
    ),
    ConfigEnvOption(
        group="platform",
        name="board_build.mcu",
        description="A custom board MCU",
        oldnames=["board_mcu"],
        buildenvvar="BOARD_MCU",
        disabled=True,
    ),
    ConfigEnvOption(
        group="platform",
        name="board_uboot.prompt",
        description="A custom U-Boot prompt regex",
    ),
    ConfigEnvOption(
        group="platform",
        name="board_uboot.custom.uboot_config_debug.cmds",
        description="A custom U-Boot script to configure debug mode",
        buildenvvar="UBOOT_CONFIG_DEBUG_CMDS",
        multiple=True
    ),
    ConfigEnvOption(
        group="platform",
        name="board_uboot.custom.uboot_config_boot.cmds",
        description="A custom U-Boot script to configure boot mode",
        buildenvvar="UBOOT_CONFIG_BOOT_CMDS",
        multiple=True
    ),
    ConfigEnvOption(
        group="platform",
        name="board_build.f_cpu",
        description="A custom MCU frequency",
        oldnames=["board_f_cpu"],
        buildenvvar="BOARD_F_CPU",
        disabled=True,
    ),
    ConfigEnvOption(
        group="platform",
        name="board_build.f_flash",
        description="A custom flash frequency",
        oldnames=["board_f_flash"],
        buildenvvar="BOARD_F_FLASH",
        disabled=True,
    ),
    ConfigEnvOption(
        group="platform",
        name="board_build.flash_mode",
        description="A custom flash mode",
        oldnames=["board_flash_mode"],
        buildenvvar="BOARD_FLASH_MODE",
        disabled=True,
    ),
    ConfigEnvOption(
    group="platform",
    name="chip_package_path",
    description=(
        "A location which contains chip packages"
    ),
    type=click.Path(exists=True, file_okay=False, dir_okay=True),
    buildenvvar="CHIP_PACKAGE_PATH",
    disabled=False,
    ),
    # Build
    ConfigEnvOption(
        group="build",
        name="custom_build_command",
        description="Custom build command replaces default build command",
        buildenvvar="BUILD_CMD_CUSTOM",
    ),
    ConfigEnvOption(
        group="build",
        name="optimization",
        description="Compilation optimization options",
        # Compilation optimization level
        type=click.Choice(["O0", "O1", "O2", "O3", "Os"]),
        default="Os",
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="warnning",
        description="Show warnings",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="werror",
        description="Treat all warnings as errors",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="wno_unused_function",
        description="Warn for declared but unused static functions",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="wno_unused_label",
        description="Warn for declared but unused labels",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="wno_unused_parameter",
        description="Warn for declared but unused parameter",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="wno_unused_variable",
        description="Warn for declared but unused variable",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="fstack_protector_strong",
        description="Need build_type is debug for locating the problem",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="static_library_enable",
        description="static_library_enable",
        type=click.BOOL,
        default=False,
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="static_library_name",
        description="static_library_name",
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="static_library_source_file",
        description="static_library_source_file",
        type=click.Path(exists=False, file_okay=False, dir_okay=True),
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="static_library_dependency_header_file",
        description="static_library_dependency_header_file",
        type=click.Path(exists=False, file_okay=False, dir_okay=True),
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="compiler",
        description="compiler name",
        buildenvvar="COMPILER_NAME",
        type=click.Choice(["cc_riscv32_musl_fp_win"]),
        default="cc_riscv32_musl_fp_win",
        visible=True,
        platform=['aucu', 'vendorhm'],
    ),
    ConfigEnvOption(
        group="build",
        name="custom_clean_command",
        description="Custom clean command replaces default clean command",
        buildenvvar="CLEAN_CMD_CUSTOM",
    ),
    ConfigEnvOption(
        group="build",
        name="custom_make_command",
        description="Define custom make command and show make task button",
        buildenvvar="MAKE_CMD_CUSTOM",
        platform=["ambiq", "blank"]
    ),
    ConfigEnvOption(
        group="build",
        name="ohos_version",
        description="Config the version of OpenHarmony source in project",
        buildenvvar="OHOS_VERSION",
        readonly=True,
    ),
    ConfigEnvOption(
        group="build",
        name="ohos_kernel",
        description="Config the kernel of OpenHarmony source in project",
        buildenvvar="OHOS_KERNEL",
    ),
    ConfigEnvOption(
        group="build",
        name="build_type",
        description="Project build configuration",
        type=click.Choice(["release", "debug"]),
        default="release",
        visible=True,
    ),
    ConfigEnvOption(
        group="build",
        name="board_frameworks.hb.build.product",
        description="Project product for framework hb",
        buildenvvar="BOARD_FRAMEWORKS_HB_BUILD_PRODUCT",
    ),
    ConfigEnvOption(
        group="build",
        name="build_flags",
        description=(
            "Custom build flags/options for preprocessing, compilation, "
            "assembly, and linking processes"
        ),
        multiple=True,
        sysenvvar="PLATFORMIO_BUILD_FLAGS",
        buildenvvar="BUILD_FLAGS",
        disabled=True,
    ),
    ConfigEnvOption(
        group="build",
        name="src_build_flags",
        description=(
            "The same as `build_flags` but configures flags the only for "
            "project source files (`src` folder)"
        ),
        multiple=True,
        sysenvvar="PLATFORMIO_SRC_BUILD_FLAGS",
        buildenvvar="SRC_BUILD_FLAGS",
        disabled=True,
    ),
    ConfigEnvOption(
        group="build",
        name="build_unflags",
        description="A list with flags/option which should be removed",
        multiple=True,
        sysenvvar="PLATFORMIO_BUILD_UNFLAGS",
        buildenvvar="BUILD_UNFLAGS",
        disabled=True,
    ),
    ConfigEnvOption(
        group="build",
        name="src_filter",
        description=(
            "Control which source files should be included/excluded from a "
            "build process"
        ),
        multiple=True,
        sysenvvar="PLATFORMIO_SRC_FILTER",
        buildenvvar="SRC_FILTER",
        default="+<*> -<.git/> -<.svn/>",
        disabled=True,
    ),
    ConfigEnvOption(
        group="build",
        name="targets",
        description="A custom list of targets for DevEco Build System",
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="build",
        name="compiler_bin_path",
        description="complier tool chain",
        buildenvvar="COMPILER_BIN_PATH",
        type=click.Path(exists=False, file_okay=False, dir_okay=True),
        visible=True
    ),
    ConfigEnvOption(
        group="build",
        name="custom_menu_config_cmd",
        description="Custom cmd for running menuconfig",
        type="string",
        buildenvvar="CUSTOM_MENU_CONFIG_CMD",
        visible=False,
        platform=["hisilicon_riscv", "hisilicon_arm", "xradio"]
    ),
    ConfigEnvOption(
        group="build",
        name="custom_build_ota_cmd",
        description="Custom cmd for build ota bin",
        type="string",
        buildenvvar="CUSTOM_BUILD_OTA_CMD",
        default="./build.sh",
        visible=False,
        platform=["hisilicon_riscv"]
    ),
    ConfigEnvOption(
        group="build",
        name="custom_sdk_os_path",
        description="Custom path to OS sources",
        type=click.Path(exists=False, file_okay=False, dir_okay=True),
        buildenvvar="CUSTOM_SDK_OS_PATH",
        visible=False,
        platform=["hisilicon_riscv", "hisilicon_arm"]
    ),
    # Upload
    ConfigEnvOption(
        group="upload",
        name="upload_port",
        description=(
            "An upload port which `uploader` tool uses for a firmware flashing"
        ),
        sysenvvar="PLATFORMIO_UPLOAD_PORT",
        buildenvvar="UPLOAD_PORT",
        visible=True,
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_protocol",
        description="A protocol that `uploader` tool uses to talk to a board",
        buildenvvar="UPLOAD_PROTOCOL",
        visible=True,
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_reset",
        description="Enable to reset board after the upload process",
        buildenvvar="UPLOAD_RESET",
        visible=True,
        platform="hisilicon_riscv",
        type=click.BOOL,
        default=True,
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_speed",
        description=(
            "A connection speed (baud rate) which `uploader` tool uses when "
            "sending firmware to a board"
        ),
        type=click.Choice(['300', '600', '1200', '2400', '4800', '9600', '19200', '38400',
            '43000', '56000', '57600', '115200', '921600', '1000000', '2000000', '3000000', '4000000']),
        default="115200",
        buildenvvar="UPLOAD_SPEED",
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_bin_file",
        description="A bin file that will be uploaded to a board",
        buildenvvar="UPLOAD_BIN_FILE",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        visible=True,
        platform="vendorhh"
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_flags",
        description="An extra flags for `uploader` tool",
        multiple=True,
        sysenvvar="PLATFORMIO_UPLOAD_FLAGS",
        buildenvvar="UPLOAD_FLAGS",
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_command",
        description=(
            "A custom upload command which overwrites a default from "
            "development platform"
        ),
        buildenvvar="UPLOADCMD",
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_partitions",
        description="A partition list to burn via upload tool",
        multiple=True,
        sysenvvar="PLATFORMIO_UPLOAD_PARTITIONS",
        buildenvvar="UPLOAD_PARTITIONS",
        visible=True,
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_delay_time",
        description="the before burn delay time of hiburn-serial(ms)",
        buildenvvar="UPLOAD_DELAY_TIME",
        type=click.INT,
        default=300,
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_partitions_profile",
        description="The partition profile(.xml or .txt)",
        buildenvvar="UPLOAD_PARTITIONS_PROFILE",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        visible=True
    ),
    ConfigEnvOption(
        group="upload",
        name="use_partitions_profile",
        description="Enable to use upload_partition_profile for upload; otherwise, use the upload_partitions",
        type=click.BOOL,
        default=True,
        visible=True,
    ),
    ConfigEnvOption(
        group="upload",
        name="upload_loader_bin",
        description="the upload loader bin name of tool_upgrade",
        default=True,
        visible=True,
    ),
    # suite
    ConfigEnvOption(
        group="suite",
        name="suite_burn_enable",
        description="Whether to use the extended burner for upload",
        type=click.BOOL,
        default=False,
        visible=False,
    ),
    # Monitor
    ConfigEnvOption(
        group="monitor",
        name="monitor_port",
        buildenvvar="MONITOR_PORT",
        description="A port, a number or a device name",
        visible=True,
    ),
    ConfigEnvOption(
        group="monitor",
        name="monitor_speed",
        buildenvvar="MONITOR_SPEED",
        description="A monitor speed (baud rate)",
        type=click.Choice(['300', '600', '1200', '2400', '4800', '9600', '19200', '38400',
            '43000', '56000', '57600', '115200', '921600', '1000000', '2000000', '3000000', '4000000']),
        oldnames=["monitor_baud"],
        default='9600',
    ),
    ConfigEnvOption(
        group="monitor",
        name="monitor_filters",
        description=(
            "Apply the filters and text transformations to monitor output"
        ),
        multiple=True,
    ),
    ConfigEnvOption(
        group="monitor",
        name="monitor_rts",
        description="A monitor initial RTS line state",
        type=click.IntRange(0, 1),
        default=0,
    ),
    ConfigEnvOption(
        group="monitor",
        name="monitor_dtr",
        description="A monitor initial DTR line state",
        type=click.IntRange(0, 1),
        default=0,
    ),
    ConfigEnvOption(
        group="monitor",
        name="monitor_flags",
        description=(
            "The extra flags and options for `platformio device monitor` "
            "command"
        ),
        multiple=True,
    ),
    ConfigEnvOption(
        group="monitor",
        name="monitor_encoding",
        description="Set the encoding of monitor output message",
        type=click.Choice(['UTF-8', 'GBK']),
        default="UTF-8",
    ),
    # Library
    ConfigEnvOption(
        group="library",
        name="lib_deps",
        description=(
            "A list of project library dependencies which should be installed "
            "automatically before a build process"
        ),
        oldnames=["lib_use", "lib_force", "lib_install"],
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="library",
        name="lib_ignore",
        description=(
            "A list of library names which should be ignored by "
            "Library Dependency Finder (LDF)"
        ),
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="library",
        name="lib_extra_dirs",
        description=(
            "A list of extra directories/storages where Library Dependency "
            "Finder (LDF) will look for dependencies"
        ),
        multiple=True,
        sysenvvar="PLATFORMIO_LIB_EXTRA_DIRS",
        disabled=True,
    ),
    ConfigEnvOption(
        group="library",
        name="lib_ldf_mode",
        description=(
            "Control how Library Dependency Finder (LDF) should analyze "
            "dependencies (`#include` directives)"
        ),
        type=click.Choice(["off", "chain", "deep", "chain+", "deep+"]),
        default="chain",
        disabled=True,
    ),
    ConfigEnvOption(
        group="library",
        name="lib_compat_mode",
        description=(
            "Configure a strictness (compatibility mode by frameworks, "
            "development platforms) of Library Dependency Finder (LDF)"
        ),
        type=click.Choice(["off", "soft", "strict"]),
        default="soft",
        disabled=True,
    ),
    ConfigEnvOption(
        group="library",
        name="lib_archive",
        description=(
            "Create an archive (`*.a`, static library) from the object files "
            "and link it into a firmware (program)"
        ),
        type=click.BOOL,
        default=True,
        disabled=True,
    ),
    # Check
    ConfigEnvOption(
        group="check",
        name="check_tool",
        description="A list of check tools used for analysis",
        type=click.Choice(["cppcheck", "clangtidy", "pvs-studio"]),
        multiple=True,
        default=["cppcheck"],
        disabled=True,
    ),
    ConfigEnvOption(
        group="check",
        name="check_patterns",
        description=(
            "Configure a list of target files or directories for checking "
            "(Unix shell-style wildcards)"
        ),
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="check",
        name="check_flags",
        description="An extra flags to be passed to a check tool",
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="check",
        name="check_severity",
        description="List of defect severity types for analysis",
        multiple=True,
        type=click.Choice(["low", "medium", "high"]),
        default=["low", "medium", "high"],
        disabled=True,
    ),
    ConfigEnvOption(
        group="check",
        name="check_skip_packages",
        description="Skip checking includes from packages directory",
        type=click.BOOL,
        default=False,
        disabled=True,
    ),
    # Test
    ConfigEnvOption(
        group="test",
        name="test_filter",
        description="Process tests where the name matches specified patterns",
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="test",
        name="test_ignore",
        description="Ignore tests where the name matches specified patterns",
        multiple=True,
        disabled=True,
    ),
    ConfigEnvOption(
        group="test",
        name="test_port",
        description="A serial port to communicate with a target device",
        disabled=True,
    ),
    ConfigEnvOption(
        group="test",
        name="test_speed",
        description="A connection speed (baud rate) to communicate with a target device",
        type=click.INT,
        default=0,
        disabled=True,
    ),
    ConfigEnvOption(
        group="test",
        name="test_transport",
        description="A transport to communicate with a target device",
        disabled=True,
    ),
    ConfigEnvOption(
        group="test",
        name="test_build_project_src",
        description="Build project source code in a pair with test code",
        type=click.BOOL,
        default=False,
        disabled=True,
    ),
    # Debug
    ConfigEnvOption(
        group="debug",
        name="debug_tool",
        description="A name of debugging tool",
    ),
        ConfigEnvOption(
        group="debug",
        name="debug_script",
        description="A path to script for debugging",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_interface",
        description="The target interface which is used to connect to the device",
        type=click.Choice(["jtag", "swd"]),
        default="jtag",
        buildenvvar="DEBUG_INTERFACE",
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_speed",
        description=(
            "Starts GDB Server with a given initial speed in kHz"
        ),
        type=click.INT,
        default=1,
        buildenvvar="DEBUG_SPEED",
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_device",
        description=(
            "A device name for jlink debug"
        ),
        buildenvvar="DEBUG_DEVICE",
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_elf",
        description="A path to custom ELF for debugging",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        buildenvvar="PROG_PATH"
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_client",
        description="A name of debugging client",
        visible=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_build_flags",
        description=(
            "Custom debug flags/options for preprocessing, compilation, "
            "assembly, and linking processes"
        ),
        multiple=True,
        default=["-Og", "-g2", "-ggdb2"],
        disabled=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_init_break",
        description=(
            "An initial breakpoint that makes program stop whenever a "
            "certain point in the program is reached"
        ),
        default="tbreak main",
        visible=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_init_cmds",
        description="Initial commands to be passed to a back-end debugger",
        multiple=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_extra_cmds",
        description="An extra commands to be passed to a back-end debugger",
        multiple=True,
        visible=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_load_cmds",
        description=(
            "A list of commands to be used to load program/firmware "
            "to a target device"
        ),
        oldnames=["debug_load_cmd"],
        multiple=True,
        default=["load"],
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_load_mode",
        description=(
            "Allows one to control when DevEco should load debugging "
            "firmware to the end target"
        ),
        type=click.Choice(["always", "modified", "manual"]),
        default="always",
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_server",
        description="Allows one to setup a custom debugging server",
        multiple=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_port",
        description=(
            "A debugging port of a remote target (a serial device or "
            "network address)"
        ),
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_svd_path",
        description=(
            "A custom path to SVD file which contains information about "
            "device peripherals"
        ),
        type=click.Path(exists=True, file_okay=True, dir_okay=False),
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_live_watch_enable",
        description="enable live watch function",
        type=click.BOOL,
        default=False,
        visible=True,
    ),
    ConfigEnvOption(
        group="debug",
        name="debug_hssclient_path",
        description=(
            "A custom path of hssclient is used to realize the function of live watch"
        ),
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
    ),
    # Advanced
    ConfigEnvOption(
        group="advanced",
        name="extends",
        description=(
            "Inherit configuration from other sections or build environments"
        ),
        multiple=True,
    ),
    ConfigEnvOption(
        group="advanced",
        name="extra_scripts",
        description="A list of PRE and POST extra scripts",
        oldnames=["extra_script"],
        multiple=True,
        sysenvvar="PLATFORMIO_EXTRA_SCRIPTS",
    ),
    ConfigEnvOption(
        group="advanced",
        name="verbose_output",
        description="Enable verbose output for IDE tasks",
        type=click.BOOL,
        default=False,
        visible=True,
    ),

    # Partitions
    ConfigPartitionOption(
        group="partition",
        name="default_options",
        description="A list of default options values for partition creation",
        default=["partition_platform =",
                    "partition_board =",
                    "partition_type =",
                    "partition_env ="
                    ],
        disabled=True
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_env",
        description="The env to which the partition belongs",
        multiple=False,
        visible=True,
        readonly=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_board",
        description="Board",
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_type",
        description="Partition type",
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_platform",
        description="Partition platform",
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_mem",
        description="Memory type",
        type=click.Choice(["spi", "emmc", "nand", "mcu"]),
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_fs",
        description="File system",
        type=click.Choice(["none", "ext3/4"]),
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_addr",
        description="Partition start address",
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_length",
        description="Partition length",
        multiple=False,
        visible=True,
    ),
    ConfigPartitionOption(
        group="partition",
        name="partition_bin",
        description="A custom path to partition binary",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        multiple=False,
        visible=True,
    ),
    # Network upload
    ConfigEnvOption(
        group="Network upload",
        name="upload_net_server_ip",
        description="A IP address of server for network upload via hiburn",
        buildenvvar="UPLOAD_NET_SERVER_IP",
        visible=True,
    ),
    ConfigEnvOption(
        group="Network upload",
        name="upload_net_client_mask",
        description="A network mask of client for network upload via hiburn",
        buildenvvar="UPLOAD_NET_CLIENT_MASK",
        visible=True,
    ),
    ConfigEnvOption(
        group="Network upload",
        name="upload_net_client_gw",
        description="A gateway of client for network upload via hiburn",
        buildenvvar="UPLOAD_NET_CLIENT_GW",
        visible=True,
    ),
    ConfigEnvOption(
        group="Network upload",
        name="upload_net_client_ip",
        description="A IP address of client for network upload via hiburn",
        buildenvvar="UPLOAD_NET_CLIENT_IP",
        visible=True,
    ),
    ConfigEnvOption(
        group="Network upload",
        name="upload_net_server_port",
        type=click.INT,
        default=69,
        description="Bootloader tftp port",
        buildenvvar="UPLOAD_NET_SERVER_PORT",
        visible=True,
    ),
    # HPM configuration
    ConfigEnvOption(
        group="HPM",
        name="hpm_project_template",
        description="",
    ),
    ConfigEnvOption(
        group="HPM",
        name="hpm_project_base_package",
        buildenvvar="HPM_PROJECT_BASE_PACKAGE",
        description="",
    ),
    # download configuration
    ConfigEnvOption(
        group="Download",
        name="download_type",
        description="",
        readonly=True,
    ),
    ConfigEnvOption(
        group="Download",
        name="download_name",
        description="",
        readonly=True,
    ),
    ConfigEnvOption(
        group="Download",
        name="download_url",
        description="",
        readonly=True,
    ),
    ConfigEnvOption(
        group="Download",
        name="download_size",
        description="",
        readonly=True,
    ),
    ConfigEnvOption(
        group="Download",
        name="download_status",
        description="",
        readonly=True,
    ),
    ConfigEnvOption(
        group="Download",
        name="download_profile",
        description="",
        readonly=True,
    ),
    ConfigEnvOption(
        group="Download",
        name="profile_pdf",
        description="",
        readonly=True,
    ),
    # analysis configuration
    ConfigEnvOption(
        group="analysis",
        name="analysis_elf_path",
        description="A custom path to elf file used to Perform analysis",
        buildenvvar="ANALYSIS_ELF_PATH",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        visible=True,
    ),
    ConfigEnvOption(
        group="analysis",
        name="analysis_map_path",
        description="A custom path to map file used to Perform analysis",
        buildenvvar="ANALYSIS_MAP_PATH",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        visible=True,
    ),
    ConfigEnvOption(
        group="analysis",
        name="analysis_perf_path",
        description="A custom path to perf data file used to Perform analysis",
        buildenvvar="ANALYSIS_PERF_PATH",
        type=click.Path(exists=False, file_okay=True, dir_okay=False),
        visible=True,
    ),
    ConfigEnvOption(
        group="analysis",
        name="analysis_rootfs_path",
        description="A custom path to rootfs directory used to Perform analysis",
        buildenvvar="ANALYSIS_ROOTFS_PATH",
        type=click.Path(exists=False, file_okay=False, dir_okay=True),
        visible=True,
    ),
    ConfigEnvOption(
        group="analysis",
        name="analysis_compiler_path",
        description="A custom path to compiler used to Perform analysis",
        buildenvvar="ANALYSIS_COMPILER_PATH",
        type=click.Path(exists=False, file_okay=False, dir_okay=True),
        visible=True,
    ),
    ConfigEnvOption(
        group="analysis",
        name="analysis_mode",
        description="0 (Only analyze assembly code); 1 (Analyze source code line number); 2 (Analyze source code in disassembly file).",
        buildenvvar="ANALYSIS_MODE",
        type=click.Choice(["0", "1", "2"]),
        default="0",
        visible=True,
    ),
    ConfigEnvOption(
        group="analysis",
        name="analysis_rec_stats",
        description="Recursive function loop cycles.",
        buildenvvar="ANALYSIS_REC_STATS",
        type=click.IntRange(0),
        default=1,
        visible=True,
    )]

ProjectOptions = OrderedDict(
    [(f'{option.scope}.{option.name}', option)
        for option in PROJECT_OPTIONS_LISTS
    ])


def get_config_options_schema():
    return [opt.as_dict() for opt in ProjectOptions.values()]
