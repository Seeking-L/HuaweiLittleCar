#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
Description: feature util method class
Create: 2021-5-31
"""
import platform
import platformio.deveco_feature_toggling.exception as exception


class Features:
    @staticmethod
    def __is_key_word(name):
        return name in ['enabled', 'system', 'description']

    @staticmethod
    def __validate(item, name):
        enabled = item.get('enabled', True)
        if not isinstance(enabled, bool):
            raise exception.ValidationError(f'enabled is mandatory boolean for object "{name}"')

        os_system = item.get('system', [])
        if not isinstance(os_system, list):
            raise exception.ValidationError(f'system must be a list for object "{name}"')

        features = {k: v for k, v in item.items() if not Features.__is_key_word(k)}
        for k, v in features.items():
            Features.__validate(v, f'{name}.{k}' if name else k)

    def __init__(self, manifest):
        Features.__validate(manifest, None)
        self.__manifest = manifest

    def get(self, name, os_system=None):
        if not os_system:
            os_system = platform.system().lower()

        manifest = self.__manifest
        enabled = True
        system = None
        for name in name.split('.'):
            manifest = manifest.get(name)
            if manifest is None or Features.__is_key_word(name):
                return None

            enabled = manifest.get('enabled', True) if enabled else False
            if system is None:
                system = manifest.get('system')
            else:
                system = list(set(system) & set(manifest.get('system', system)))

        return (system is None or os_system in system) if enabled else False

    def to_list(self):
        result = []

        def proc_item(name, item):
            if name:
                result.append(name)

            sub = {k: v for k, v in item.items() if not Features.__is_key_word(k)}
            for k, v in sub.items():
                proc_item(name=f'{name}.{k}' if name else k, item=v)
        proc_item(name=None, item=self.__manifest)
        return result
