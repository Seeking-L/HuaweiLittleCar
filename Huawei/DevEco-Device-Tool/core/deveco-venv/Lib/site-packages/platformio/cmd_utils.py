#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2022-2023. All rights reserved.
Description:
Create: 2022-08-25
"""

import re
import itertools


def iter_arg(peek, item):
    quote_mode = False
    for i in itertools.chain([peek], item):
        space, slash, quote, text = i.groups()
        if space:
            if quote_mode:
                yield space
            else:
                return
        elif quote:
            len_slash = len(slash)
            len_quote = len(quote)
            slash_odd = bool(len_slash % 2)
            yield '\\' * (len_slash // 2)
            magic_sum = len_quote + quote_mode + 2 * slash_odd
            yield '"' * (magic_sum // 3)
            quote_mode = (magic_sum % 3) == 1
        else:
            yield text


def iter_args(s):
    ms = re.finditer(r'(\s+)|(\\*)(\"+)|(.[^\s\\\"]*)', s.lstrip())
    for m in ms:
        yield ''.join(iter_arg(m, ms))


cmd = r'([\"\^\&\|\<\>\(\)\%\!])'
cmd_space = r'[\s\"\^\&\|\<\>\(\)\%\!]'
cmd_inside_quotes = r'([\"\%\!])'


def win_split(cmd_line, like_cmd=True, check=True):
    if like_cmd and re.search(cmd, cmd_line):
        def parts():
            quote_mode = False
            for m in re.finditer(r'(\^.)|(\")|([^\^\"]+)', cmd_line):
                escape, quote, text = m.groups()
                if escape:
                    if quote_mode:
                        yield escape
                        quote_mode = False if escape == '"' else quote_mode
                    else:
                        yield escape[1]
                elif quote:
                    yield '"'
                    quote_mode = not quote_mode
                else:
                    yield text
                    if check:
                        meta = cmd_inside_quotes if quote_mode else cmd
                        raise_error(meta, text)

        def raise_error(meta, text):
            if re.search(meta, text):
                raise ValueError(f"unquoted cmd metacharacters in string: {repr(cmd_line)}")

        cmd_line = ''.join(parts())
    return list(iter_args(cmd_line))


def win_quote(cmd_line, for_cmd=True):
    if not cmd_line:
        return '""'
    if not re.search(cmd_space, cmd_line):
        return cmd_line
    if for_cmd and re.search(cmd, cmd_line):
        if not re.search(cmd_inside_quotes, cmd_line):
            params = re.search(r'\\+$', cmd_line)
            if params:
                return '"' + cmd_line + params.group() + '"'
            else:
                return '"' + cmd_line + '"'
        if not re.search(r'[\s\"]', cmd_line):
            return re.sub(cmd, r'^\1', cmd_line)
        return re.sub(cmd, r'^\1', win_quote(cmd_line, for_cmd=False))
    items = re.finditer(r'(\\*)(\"+)|(\\+)|([^\\\"]+)', cmd_line)

    def parts():
        yield '"'
        for m in items:
            pos, end = m.span()
            slash, quote, only_slash, text = m.groups()
            if quote:
                yield slash
                yield slash
                yield r'\"' * len(quote)
            elif only_slash:
                if end == len(cmd_line):
                    yield only_slash
                    yield only_slash
                else:
                    yield only_slash
            else:
                yield text
        yield '"'

    return ''.join(parts())
