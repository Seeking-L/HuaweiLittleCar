"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
Create: 2021-9-7
"""
# !/usr/bin/env python
# -*- coding: utf-8 -*-
#
import secrets
from platformio.security.cryptor_kit import CryptorKit
import os
import hashlib
import platform

"""
Key Manager
"""


def xor(all_root_components):
    """
    The XOR operation of all bytes obtains one byte.
    :param all_root_components: all root key components
    :return: root key
    """
    two_result = bytearray()
    for char1, char2 in zip(all_root_components[0], all_root_components[1]):
        two_result.append(ord(char1) ^ ord(char2))
    three_result = bytearray()
    component_size = len(all_root_components[2])
    for comp_index in range(0, component_size):
        three_result.append(
            two_result[comp_index] ^ ord(
                all_root_components[2][comp_index]))
    final_result = bytearray()
    for comp_index in range(0, component_size):
        final_result.append(
            three_result[comp_index] ^ ord(
                all_root_components[3][comp_index]))
    result = bytes(final_result)
    return result


class KeyManager:
    """
    Key Component Generator
    """

    def __init__(self, module_name):
        self.COMPONENT_COUNT = 3
        self.KEY_LENGTH = 16
        self.COMPONENT_DIR_NAME = ['dog', 'apple', 'cat']
        self.STATIC_ROOT_COMPONENT = "f5ccde9f49d0d6665ab4ac5f446bc7e4"
        self.ROOT_FOLDER = os.path.join('security', module_name)
        self.ITERATE_COUNT = 10000

    def read_or_create_key(self, material_dir):
        """
        Obtain the working key from the local key component
        or obtain the working key from the local key component.
        :param material_dir: root_path
        :return: work_key
        """
        root_path = os.path.join(material_dir, self.ROOT_FOLDER)
        if not os.path.exists(root_path):
            os.makedirs(root_path, mode=0o700)
            return self.generate_key(material_dir)
        return self.read_key(material_dir)

    def get_safe_random(self, length):
        if platform.system() == 'Linux':
            with open('/dev/random', 'rb') as file:
                random = file.read(length)
                file.close()
        else:
            random = secrets.token_bytes(length)
        return random

    def generate_key(self, dir_path):
        """
        Generates the local key component and returns the working key.
        :param dir_path: root path
        :return: work_key
        """
        root_key_components = self.generate_root_components()
        salt = self.get_safe_random(self.KEY_LENGTH)
        root_key = self.generate_root_key(root_key_components, salt)
        work_key = self.get_safe_random(self.KEY_LENGTH)
        root_key = bytes(root_key, encoding='utf-8')
        crypto = CryptorKit()
        work_material = crypto.encrypt(root_key, work_key)

        self.save_root_key_components(dir_path, root_key_components)
        self.save_file(dir_path, salt, self.COMPONENT_DIR_NAME[1])
        self.save_file(dir_path, work_material, self.COMPONENT_DIR_NAME[2])

        return work_key

    def generate_root_components(self):
        """
        generate some root components, will be saves in local file
        :return: root components
        """
        components = []
        while len(components) < self.COMPONENT_COUNT:
            components.append(self.get_safe_random(self.KEY_LENGTH).hex())
        return components

    def generate_root_key(self, root_key_components, salt):
        """
        Use the root key components to generate a root key. Iterations are 10,000 times.
        :param root_key_components: root key components
        :param salt: salt
        :return: root key components
        """
        root_key_components.append(self.STATIC_ROOT_COMPONENT)
        final_root_component = xor(root_key_components)
        result = hashlib.pbkdf2_hmac(
            'sha512',
            final_root_component,
            salt,
            self.ITERATE_COUNT,
            self.KEY_LENGTH)
        return result.hex()

    def save_root_key_components(self, dir_path, root_key_components):
        """
        Save some root key components to the local PC.
        :param dir_path: Root Path
        :param root_key_components: root_key_components
        :return:
        """
        path = os.path.join(
            dir_path,
            self.ROOT_FOLDER,
            self.COMPONENT_DIR_NAME[0])
        if not os.path.exists(path):
            os.makedirs(path)
        flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
        for i in range(0, self.COMPONENT_COUNT):
            ac_file = os.path.join(path, str(i))
            with os.fdopen(os.open(ac_file, flags, 0o600), 'w') as file_write:
                file_write.write(root_key_components[i])
            os.chmod(ac_file, 0o600)

    def save_file(self, dir_path, content, file_dir):
        """
        Save the salt value to the local host.
        :param dir_path:Root Path
        :param content: content
        :param file_dir: salt file path
        :return:
        """
        path = os.path.join(
            dir_path,
            self.ROOT_FOLDER,
            file_dir)
        if not os.path.exists(path):
            os.makedirs(path)
        flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
        ac_file = os.path.join(path, 'content')
        with os.fdopen(os.open(ac_file, flags, 0o600), 'w') as file_write:
            file_write.buffer.write(content)
        os.chmod(ac_file, 0o600)

    def read_key(self, material_dir):
        """
        Obtaining a Symmetric Key
        :param material_dir: Key Material Path
        :return: Symmetric Key
        """
        components = self.read_components(material_dir)
        salt = self.read_file(material_dir, self.COMPONENT_DIR_NAME[1])
        work_material = self.read_file(
            material_dir, self.COMPONENT_DIR_NAME[2])

        root_key = self.generate_root_key(components, salt)
        root_key = bytes(root_key, encoding='utf-8')
        crypto = CryptorKit()
        return crypto.decrypt(root_key, work_material)

    def read_components(self, material_dir):
        """
        Read Root Key Components
        :param material_dir: Key Material Path
        :return: Root Key Components
        """
        path = os.path.join(
            material_dir,
            self.ROOT_FOLDER,
            self.COMPONENT_DIR_NAME[0])
        files = os.listdir(path)
        components = []
        for file in files:
            with open(os.path.join(path, file), 'r') as file_reader:
                components.append(file_reader.readline())
        return components

    def read_file(self, material_dir, file_dir):
        """
        Read salt value
        :param material_dir: Key Material Path
        :param file_dir: salt path
        :return: salt value
        """
        path = os.path.join(
            material_dir,
            self.ROOT_FOLDER,
            file_dir)
        files = os.listdir(path)
        with open(os.path.join(path, files[0]), 'r') as file_reader:
            result = file_reader.buffer.read()
        return result
