import os
import click
from platformio.rpc.client import Client
from platformio.rpc.client_console import Console
from platformio.rpc.client_file_transfer import FileTransfer
from platformio.compat import OS


async def remote_command_handle(transport, k, v):
    zip_exists = await transport.file_transfer.check_upload_file(zip_name=v['zip_name'])
    tool_exists = await transport.file_transfer.check_tool_file(tool_name=k)
    if not zip_exists:
        click.echo("Transferring upload tool...")
        trans_file = os.path.realpath(os.path.join(v['store'], v['zip_name']))
        await FileTransfer(transport=transport).upload(trans_file, burn_tool=True)
        await transport.file_transfer.unzip_file(zip_name=v['zip_name'], tool_name=k)
        click.echo("upload tool transfer completed")
    elif not tool_exists:
        click.echo("Unzip upload tool...")
        await transport.file_transfer.unzip_file(zip_name=v['zip_name'], tool_name=k)
        click.echo("upload tool unzip completed")


def execute_remote_command(command, project_dir, files, artifacts=None, upload_tools=None):
    async def on_connected(transport):
        await transport.session.open(project_path=project_dir if project_dir else os.path.realpath('.'), system=OS)
        if upload_tools:
            for k, v in upload_tools.items():
                await remote_command_handle(transport, k, v)
        if len(files) > 0:
            click.echo("Transferring files...")
            for f in files:
                await FileTransfer(transport=transport).upload(os.path.realpath(os.path.join(project_dir, f)))
            await transport.file_transfer.deveco_mapping(deveco_path=os.path.join(project_dir, ".deveco", "deveco.ini"))
            click.echo("Files transfer completed")
        return await Console(transport=transport).execute(command, artifacts)

    exit_code = Client(on_connected=on_connected).start()
    return exit_code == 0
