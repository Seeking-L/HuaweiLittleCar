import socket
import subprocess
import os
import time
import asyncio
import jsonrpc_websocket
from jsonrpc_base import TransportError
from aiohttp import ClientConnectorError
from platformio.helpers import get_executable_path
from platformio.proc import LineBufferedAsyncPipe
from platformio.util import get_free_port
from platformio import app
# noinspection PyPackageRequirements
import click


class _Server:
    class Collector(LineBufferedAsyncPipe):
        def __init__(self):
            super().__init__(self.cb)

        def cb(self, _):
            pass

    def __init__(self, port):
        self.__stdout = self.Collector()
        self.__stderr = self.Collector()
        # noinspection PyTypeChecker
        self.__server = subprocess.Popen([get_executable_path(), 'remote', 'operation-server',
                                          '--auto-stop', '--port', str(port)],
                                         stdout=self.__stdout,
                                         stderr=self.__stderr)

    def wait_started(self, timeout):
        st = time.time()
        while time.time() - st < timeout and self.__server.poll() is None:
            if 'DevEco_remote_operation_server started' in self.__stdout.get_buffer():
                break
        else:
            raise Exception(f'Can not start deveco operation server: '
                            f'spend time = {time.time() - st} sec, '
                            f'server exit code={self.__server.returncode}, '
                            f'server stdout={self.__stdout.get_buffer()}, '
                            f'server stderr={self.__stderr.get_buffer()}')

    def stop(self):
        self.__server.terminate()
        self.__stdout.close()
        self.__stderr.close()


class Client:
    PORT_RANGE = (8100, 8200)
    SERVER_START_TIMEOUT = 3.0

    def __init__(self, on_connected):
        self.__on_connected = on_connected

    async def __routine(self, port):
        server = jsonrpc_websocket.Server(f'ws://127.0.0.1:{port}/wsrpc')
        await asyncio.wait_for(server.ws_connect(), app.get_setting('operation_server_connection_timeout'))
        return await self.__on_connected(transport=server)

    def start(self):
        server = None
        exit_code = -1
        try:
            port = os.environ.get('DEVECO_REMOTE_SERVER_PORT', '')
            if not port:
                port = get_free_port(self.PORT_RANGE)
            # startup server
            if not os.environ.get('DEVECO_REMOTE_SERVER_PORT', ''):
                server = _Server(port)
                server.wait_started(self.SERVER_START_TIMEOUT)

            # connect client
            try:
                exit_code = asyncio.get_event_loop().run_until_complete(self.__routine(port))
            except TransportError as e:
                if [a for a in e.args if isinstance(a, ClientConnectorError)]:
                    click.secho(f'Can not connect to operation server on port {port}, Please reconnect Local PC', fg='red')
                else:
                    click.secho('unknown transport error', fg='red')
            except Exception as e:  # pylint: disable=broad-except
                click.secho('run until complete error', fg='red')
        finally:
            if server:
                server.stop()

        return exit_code
