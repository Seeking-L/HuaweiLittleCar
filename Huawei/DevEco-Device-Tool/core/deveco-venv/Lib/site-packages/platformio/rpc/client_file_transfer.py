import base64
import os
import tempfile
import shutil
import click
import time
from platformio.util import get_systype
from platformio.commands.dotting.helpers import TraceOperate, RemoteTrace


class FileTransfer:
    CHUNK_SIZE = 1024 * 500
    SYSTEM_OS = "win32" if "windows" in get_systype() else "linux"

    def __init__(self, transport):
        self.__transport = transport

    async def upload(self, path, burn_tool=False):
        size = os.stat(path).st_size
        start_time = time.time()
        (_, file_name) = os.path.split(path)
        with open(path, 'rb') as f:
            offset = 0
            while True:
                try:
                    click.echo(f"\r  {int(offset/size*100)}%, Transferring file: {file_name}", nl=False)
                except ZeroDivisionError:
                    print("You can't divide by 0!")
                chunk = f.read(self.CHUNK_SIZE)
                b64_chunk = base64.b64encode(chunk).decode()
                if not chunk:
                    click.echo("", nl=True)
                    break
                await self.__transport.file_transfer.upload(file=path, content=b64_chunk, offset=offset, size=size,
                                                            file_name=file_name, burn_tool=burn_tool)
                offset += len(chunk)
        end_time = time.time()
        TraceOperate(RemoteTrace).operate('Remote', 'upload', self.SYSTEM_OS, file_name, size, start_time, end_time)

    async def download(self, path):
        offset = 0
        size = None
        start_time = time.time()
        fd, tmp = tempfile.mkstemp()
        f = os.fdopen(fd, 'wb')

        while size is None or offset < size:
            content = await self.__transport.file_transfer.download(file=path, offset=offset)
            if size is None:
                size = content.get('size', 0)
            byte_data = base64.b64decode(content.get('content'))
            if offset != content.get('offset'):
                raise ValueError(f"{offset} not equal {content.get('offset')}")
            f.write(byte_data)
            offset += len(byte_data)
        f.close()
        end_time = time.time()
        fp, file_name = os.path.split(path)
        if not os.path.exists(fp):
            os.makedirs(fp)
        shutil.copyfile(tmp, os.path.realpath(path))
        os.remove(tmp)
        TraceOperate(RemoteTrace).operate('Remote', 'download', self.SYSTEM_OS, file_name, size, start_time, end_time)
