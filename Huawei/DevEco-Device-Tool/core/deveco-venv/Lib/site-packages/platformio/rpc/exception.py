class RpcError(Exception):
    @staticmethod
    def from_json(j):
        return RpcError(code=j.get('error', {}).get('code'),
                        message=j.get('error', {}).get('message'),
                        request_id=j.get('id', None))

    def __init__(self, code, message, request_id=None):
        super().__init__()
        self.code = code
        self.message = message
        self.rq_id = request_id

    def to_json(self):
        return {
            'jsonrpc': '2.0',
            'id': self.rq_id,
            'error': {'code': self.code, 'message': self.message}
        }


class InvalidRpcError(RpcError):
    def __init__(self):
        super().__init__(code=-32600, message='Invalid JSON-RPC.', request_id=None)


class MethodNotFoundError(RpcError):
    def __init__(self, request_id, name):
        super().__init__(code=-32601, message=f'Procedure not found. {name}', request_id=request_id)


class ParseJsonError(RpcError):
    def __init__(self):
        super().__init__(code=-32700, message='Parse error.', request_id=None)


class PermissionRpcError(RpcError):
    def __init__(self,request_id):
        super().__init__(code=-32800,
                         message='Permission denied. Reselect another directory with permission.',
                         request_id=request_id)