import json
import os
import click
import platformio.project.config
import platformio.managers.package
import platformio.compat
import platformio.managers.core
from platformio.managers.platform import PlatformFactory, PlatformManager


@click.group(short_help="Package Manager")
def cli():
    pass


def _print_packages(packages):
    for package in packages:
        h = f"{package['name']} == {package['version']}"
        click.secho(h, fg="cyan")
        click.echo("=" * len(h))
        for k, v in package.items():
            if k not in ['name', 'version']:
                click.echo(f'{k}: {v}')
        click.echo()


@cli.command("list", short_help="List of installed packages", hidden=True)
@click.option("--json-output", is_flag=True)
@click.option(
    "--project-dir",
    multiple=True,
    required=False
)
def package_list(json_output, project_dir):
    pm = platformio.managers.core.CorePackageManager(project_dir)
    packages = pm.get_installed()

    if json_output:
        click.echo(packages if isinstance(packages, str) else json.dumps(packages, ensure_ascii=True, sort_keys=True))
    else:
        _print_packages(packages)


@cli.command("add-user", short_help="List of installed packages", hidden=True)
@click.option("--manifest", help='Path to file or manifest itself in json format')
def package_add_user(manifest):
    pm = platformio.managers.core.CorePackageManager()
    if os.path.exists(manifest):
        click.echo('load from')
        package = json.load(open(manifest, 'rt'))
    else:
        package = json.loads(manifest)

    return pm.add_user_package(package)


@cli.command("remove-user", short_help="List of installed packages", hidden=True)
@click.option("--name")
@click.option("--version")
@click.option("--scope")
def package_remove_user(name, version, scope):
    pm = platformio.managers.core.CorePackageManager()
    return pm.remove_user_package(name, version, scope)


@cli.command("list-all", short_help="List of all packages")
def package_list_all():
    pm = PlatformManager()
    packages = set()
    for platform in pm.get_installed():
        p = PlatformFactory.newPlatform(platform["__pkg_dir"])
        packages = packages | set(p.packages)

    click.echo(platformio.compat.dump_json_to_unicode(sorted(packages)))
