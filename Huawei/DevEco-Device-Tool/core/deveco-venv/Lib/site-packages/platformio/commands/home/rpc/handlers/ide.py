# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import time
import asyncio
import os
import json
import shutil
import platformio.rpc.server
from platformio.commands.dotting.helpers import TraceData, TraceOperate, ProjectManager
from platformio.util import get_real_path, get_home_url
from platformio.helpers import get_executable_path, is_deveco_project
from platformio.managers.platform import PlatformManager

TRACE_SID = '10000'


class IDERPC(platformio.rpc.server.Handler):

    def __init__(self, connection, manager, logger):
        super().__init__(connection=connection, manager=manager, logger=logger)
        self.sid = None
        self.command_queue = []
        self.loop = asyncio.get_event_loop()

    # IDE side
    # ---------------------------------------------------------------------------------------------

    @platformio.rpc.server.Handler.method()
    def listen_commands(self, params, request_id):
        self.sid = params[0]
        self.command_queue.append(request_id)
        return platformio.rpc.server.AsyncResponse()

    @staticmethod
    @platformio.rpc.server.Handler.method()
    def trace_data(params):
        if isinstance(params, list) and len(params) > 2:
            TraceData.trace_data(params[0], params[1], params[2])
        else:
            raise ValueError('the request parameter is incorrect')

    @staticmethod
    @platformio.rpc.server.Handler.method()
    def trace_create_project(params):
        """trace create project"""
        TraceOperate(ProjectManager).operate("Project", "create_project", params)

    @staticmethod
    @platformio.rpc.server.Handler.method()
    def trace_hpm_download(params):
        """trace create project"""
        TraceOperate(ProjectManager).operate("Project", "hpm_download_project", params)

    @staticmethod
    @platformio.rpc.server.Handler.method()
    def trace_import_project(params):
        """trace import project"""
        TraceOperate(ProjectManager).operate("Project", "import_project", params)

    @staticmethod
    @platformio.rpc.server.Handler.method()
    def page_trace(params):
        if isinstance(params, list) and len(params) > 0:
            TraceData.trace_data(TRACE_SID, params[0], params[1] if len(params) > 1 else None)
        else:
            raise ValueError('the request parameter is incorrect')

    @staticmethod
    @platformio.rpc.server.Handler.method()
    def get_node_path():
        node_path = shutil.which('node')
        return node_path if node_path else ''
    # home page side
    # ---------------------------------------------------------------------------------------------

    @TraceData(TRACE_SID, 'OpenProject', {'projectType': 'open project'})
    @platformio.rpc.server.Handler.method()
    def open_project(self, params):
        project_dir = get_real_path(params[1])
        if not is_deveco_project(project_dir):
            raise ValueError(f"Invalid value: {project_dir}")
        return self.__send_command_to_ide(params[0], params[2], project_dir)

    @TraceData(TRACE_SID, 'RemoveProject', {'projectType': 'remove project'})
    @platformio.rpc.server.Handler.method()
    def remove_project(self, params):
        project_dir = get_real_path(params[1])
        if not is_deveco_project(project_dir):
            raise ValueError(f"Invalid value: {project_dir}")
        return self.__send_command_to_ide(
            params[0],
            params[2],
            project_dir
        )

    @platformio.rpc.server.Handler.method()
    def copy_sdk(self, params):
        self.__copydirs(params[5],params[3])

    @platformio.rpc.server.Handler.method()
    def open_text_document(self, params):
        sid = params[0]
        path = get_real_path(params[1])
        line = params[2] if len(params) > 2 else None
        column = params[3] if len(params) > 3 else None
        return self.__send_command_to_ide(sid, "openTextDocument", dict(path=path, line=line, column=column))

    @platformio.rpc.server.Handler.method()
    def open_url(self, params):
        url = get_home_url(params[1])
        return self.__send_command_to_ide(
            params[0],
            "openUrl",
            url
        )

    @platformio.rpc.server.Handler.method()
    def send_command_to_ide(self, params):
        return self.__send_command_to_ide(
            params[0],
            params[2],
            params[1]
        )

    @platformio.rpc.server.Handler.method()
    def create_scaffold(self, params):
        cmds = [
            get_executable_path(),
            'scaffold',
            'gen-product',
            '-d', get_real_path(params[1]),
            '--sys-type', params[2],
            '--vendor', params[3],
            '-p', params[4],
            '-b', params[5],
            '-s', params[7]
        ]
        cmds.extend(['-i', params[6]] if params[6] else [])
        (platform, board, kernel) = IDERPC._find_match_platform_board(params[5], params[6])
        env_cmds = [
            'project', 'init',
            '-d', get_real_path(params[1]),
            '--board', board,
            '--project-option', f'platform={platform}',
            '--project-option', 'framework=hb' if params[2] != 'standard' else 'framework=ohos-sources',
            '--project-option', f'board_frameworks.hb.build.product={params[4]}@{params[3]}',
            '--project-option', f'ohos_kernel={kernel}',
            '--env-prefix', f'{params[4]}'
        ]
        return self.__send_command_to_ide(params[0], "createScaffold", dict(createCmds=cmds, envCmds=env_cmds))

    @platformio.rpc.server.Handler.method()
    def clone_profile_repos_code(self, params):
        return self.__send_command_to_ide(params[0], "cloneProfileReposCode", {})

    @platformio.rpc.server.Handler.method()
    def call_scaffold(self, params):
        return self.__send_command_to_ide(params[0], "callScaffold", {})

    def __send_command_to_ide(self, sid, command, params):
        valid_ide_handlers = []
        for c in self.manager.connections:
            ide_handler = self.manager.get_handler(c, 'ide')
            if ide_handler.command_queue:
                valid_ide_handlers.append(ide_handler)
            if ide_handler.sid == sid:
                ide_handler.loop.create_task(
                    ide_handler.send_async_response(result={"id": time.time(), "method": command, "params": params},
                                                    request_id=ide_handler.command_queue[-1])
                )
                return True

        raise Exception(f'DevEco Home IDE agent "{sid}" is not started')

    def __copydirs(self, from_file, to_file):
        if not os.path.exists(to_file):
            os.makedirs(to_file)
        files = os.listdir(from_file)
        for f in files:
            if os.path.isdir(os.path.join(from_file, f)):
                self.__copydirs(os.path.join(from_file, f), os.path.join(to_file, f))
            else:
                shutil.copy(os.path.join(from_file, f), os.path.join(to_file, f))

    @staticmethod
    def _find_match_platform_board(inherited_board, inherited_path):
        data = {}
        if inherited_path:
            config_path = os.path.join(inherited_path, 'config.json')
            try:
                data = json.load(open(config_path, 'r'))
            except (json.JSONDecodeError, FileNotFoundError):
                data = {}
        ohos_kernel = data.get('kernel_type', '')

        if inherited_path and inherited_board == 'hispark_taurus':
            if ohos_kernel == 'linux':
                return ('hisilicon_arm_linux', 'hi3516dv300', 'linux')
            else:
                return ('hisilicon_arm', 'hi3516dv300', 'liteos_a')

        pm = PlatformManager()
        boards = pm.get_installed_boards()
        for b in boards:
            hb_frk = [info for info in b.get('frameworks', []) if info.get('name', '') == 'hb']
            board_names = hb_frk[0].get('board_alias', []) if hb_frk else []
            board_names.append(b.get('name'))
            if inherited_board in board_names:
                platform = b.get('platform')
                board = b.get('id')
                return (platform, board, ohos_kernel)
        return ('blank', 'blank', ohos_kernel)
