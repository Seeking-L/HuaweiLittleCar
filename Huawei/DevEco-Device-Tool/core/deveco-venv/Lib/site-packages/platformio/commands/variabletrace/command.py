"""
variable trace
"""
import json
import os
import stat
import click
import subprocess
from platformio.compat import dump_json_to_unicode
from platformio.commands.debug.process import readelf_variables
from platformio.project.config import ProjectConfig


@click.group(short_help="variable Trace")
def cli():
    pass


@cli.command("read_elf", short_help="read elf")
@click.option("--json-output", is_flag=True)
@click.option('--project-dir', prompt='project path', help='project path')
def read_elf(project_dir, json_output):
    """read elf."""
    config = ProjectConfig.get_instance(
        os.path.join(project_dir, ".deveco", "deveco.ini"))
    # elf path setting in deveco.ini debug_elf
    for plat in config.envs():
        debug_elf = config.get("env:" + plat, "debug_elf")
        break

    elf_path = os.path.join(project_dir, debug_elf)
    data = []

    if os.path.exists(elf_path):
        data = readelf_variables.display_variables_to_json(elf_path)

    if json_output:
        click.echo(dump_json_to_unicode(data))
    else:
        click.echo(data)


@cli.command("get_configuration_list", short_help="get config file")
@click.option('--name', prompt='config file name', help='config file name')
@click.option('--project-dir', prompt='project path', help='project path')
@click.option("--json-output", is_flag=True)
def get_configuration_list(name, project_dir, json_output):
    """get_configuration_list"""
    data = []
    file_name = f'{name.lower()}.json'
    json_path = os.path.join(project_dir, file_name)
    if not os.path.exists(json_path):
        click.echo(dump_json_to_unicode(data))
        return

    with os.fdopen(os.open(json_path, os.O_RDONLY, stat.S_IRUSR), 'r') as file_handle:
        data = json.load(file_handle)

    if json_output:
        click.echo(dump_json_to_unicode(data))
    else:
        click.echo(data)


@cli.command("set_configuration_list", short_help="set config file")
@click.option('--config', prompt='config data', help='project path')
@click.option('--name', prompt='config file name', help='config file name')
@click.option('--project-dir', prompt='project path', help='project path')
def set_configuration_list(config, name, project_dir):
    """get_configuration_list"""
    file_name = f'{name.lower()}.json'
    json_path = os.path.join(project_dir, file_name)

    modes = stat.S_IWUSR | stat.S_IRUSR
    flags = os.O_RDWR | os.O_CREAT
    with os.fdopen(os.open(json_path, flags, modes), 'w') as file_handle:
        file_handle.truncate()
        file_handle.write(config)


@click.option(
    "-d",
    "--project-dir",
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option("--environment", "-e", metavar="<environment>")
@cli.command("start", short_help="start variable trace")
def start(project_dir, environment):
    config = ProjectConfig.get_instance(
        os.path.join(project_dir, '.deveco', "deveco.ini")
    )

    chip_package_path = config.get(
        f'env:{environment}', "chip_package_path", '')

    hssclient_path = os.path.abspath(os.path.join(
        chip_package_path, '..', 'IDE', 'hssclient', 'hssclient.exe'))

    platform = config.get(f'env:{environment}', "platform", '')
    mcu = config.get(f'env:{environment}', "board_build.mcu", '')
    debug_tool = config.get(f'env:{environment}', "debug_tool", '')
    debug_interface = config.get(f'env:{environment}', "debug_interface", '')
    debug_speed = config.get(f'env:{environment}', "debug_speed", '')
    elf_path  = os.path.join(project_dir, 'out', 'bin', 'target.elf')

    cmd = f'{platform} {mcu} {debug_tool} {debug_interface} {debug_speed} {elf_path}'

    subprocess.Popen([hssclient_path, "-c", cmd], cwd=project_dir)
