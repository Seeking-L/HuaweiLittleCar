# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
Description:
Create: 2022-03-17
"""

import os
import json
import click
import subprocess

from platformio.commands.component.helpers import \
    (get_component_tools, run_command, ask_for_gen_deps_files, dot_trace_gen_cfg,
    check_base_products, get_base_product, MenuAsyncPipe)
from platformio.commands.exception import (ComponentToolsNotFound, NotSupportedType, ComponentBaseNotFound)


SUPPORTED_TYPES_FOR_GEN_CONFIG = ['standard']


@click.group(short_help='Component toools')
def cli():
    pass


@cli.command('status', short_help='Check whether the component tools are available')
@click.option(
    '--project-dir',
    '-d',
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
def check_component_status(project_dir):
    component_tools = get_component_tools(project_dir)
    is_tools_valid = component_tools.get('gen_kcfg').get('valid') and component_tools.get('parse_kcfg').get('valid')
    click.echo(json.dumps({
            'valid': is_tools_valid and check_base_products(project_dir)
        }))


@cli.command('gen-product-cfg', short_help='Use component tools to generate product config file')
@click.option(
    '--project-dir',
    '-d',
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option(
    '--os-type',
    '-s',
    default='standard',
    type=click.Choice(['mini', 'small', 'standard']),
)
def generate_product_config(project_dir, os_type):
    dot_trace_gen_cfg('started', True)

    if os_type not in SUPPORTED_TYPES_FOR_GEN_CONFIG:
        raise NotSupportedType(os_type)

    component_tools = get_component_tools(project_dir)
    if not component_tools.get('gen_kcfg').get('valid') or not component_tools.get('parse_kcfg').get('valid'):
        raise ComponentToolsNotFound()

    if not check_base_products(project_dir):
        raise ComponentBaseNotFound()

    component_tools_path = component_tools.get('gen_tools_path')

    # run generate_kconfig.py to generate newest kconfig
    run_command(['python', 'generate_kconfig.py'], cwd=component_tools_path)

    # run menuconfig config view to generate .config
    menu_pipe = MenuAsyncPipe()
    run_command(['menuconfig', 'kconfig'], cwd=component_tools_path, stdout=menu_pipe)
    menu_pipe.close()

    dot_config_path = menu_pipe.config_path
    if not os.path.isabs(dot_config_path):
        dot_config_path = os.path.abspath(os.path.join(component_tools_path, dot_config_path))

    base_product = get_base_product(project_dir, os_type)

    # run build.sh to generate: deps_files
    if ask_for_gen_deps_files(project_dir, base_product.get('out_path')):
        run_command([
            './build.sh',
            '--product-name', base_product.get('base_product'),
            '--build-only-gn', '--ccache',
            '--gn-args', 'pycache_enable=true',
            '--gn-args', 'check_deps=true'],
            cwd=project_dir)
    else:
        click.echo('skip regenerate deps_files. Generating product.json...')

    out_path = os.path.join(project_dir, base_product.get('out_path'))

    # generate dependency of components: part_deps_info.json
    run_command(
        ['python', 'part_deps.py', '--deps-files-path', os.path.join(out_path, 'deps_files')],
        cwd=component_tools.get('deps_tools_path'),
        stdout=subprocess.DEVNULL)

    # generate product.json
    run_command([
        'python', 'parse_kconf.py',
        '--config', dot_config_path,
        '--base_product', base_product.get('product_path'),
        f'--deps={os.path.join(out_path, "part_deps_info", "part_deps_info.json")}'],
        cwd=component_tools_path,
        stdout=subprocess.DEVNULL)

    click.secho(f'Output config file: {os.path.join(component_tools_path, "product.json")}', fg='green')
    dot_trace_gen_cfg('finished', True)
