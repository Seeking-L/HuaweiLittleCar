# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
AppRPC
"""
import os
import json
import webbrowser
import string
import platformio.rpc.server
from platformio.rpc.server import Handler
from platformio import __version__, app, util
from platformio.helpers import get_installed_path, get_config_json_path
from platformio.project.helpers import is_platformio_project


class AppRPC(platformio.rpc.server.Handler):
    """
    AppRPC
    """
    APPSTATE_PATH = os.path.join(get_config_json_path(), "homestate.json")

    IGNORE_STORAGE_KEYS = [
        "cid",
        "coreVersion",
        "coreSystype",
        "coreCaller",
        "coreSettings",
        "homeDir",
        "projectsDir",
    ]
    OUTPUT_CONFIG = "board.json"

    @staticmethod
    def load_state():
        """
        load_state
        """
        with app.State(AppRPC.APPSTATE_PATH, lock=True) as state:
            storage = state.get("storage", {})

            # base data
            caller_id = app.get_session_var("caller_id")
            storage["cid"] = app.get_cid()
            storage["coreVersion"] = __version__
            storage["coreSystype"] = util.get_systype()
            storage["coreCaller"] = str(
                caller_id).lower() if caller_id else None
            storage["coreSettings"] = {
                name: {
                    "description": data["description"],
                    "default_value": data["value"],
                    "value": app.get_setting(name),
                }
                for name, data in app.DEFAULT_SETTINGS.items()
            }

            toolchainDir = storage.get("toolchainDir", "")
            storage["toolchainDir"] = toolchainDir \
                if toolchainDir else os.path.join(get_config_json_path(), 'tool_chains')
            storage["homeDir"] = get_installed_path()
            storage["userDir"] = os.path.expanduser("~")
            storage["projectsDir"] = storage["coreSettings"]["projects_dir"]["value"]

            # skip non-existing recent projects
            storage["recentProjects"] = [
                p for p in storage.get("recentProjects", [])
                if is_platformio_project(p)]

            state["storage"] = storage
            state.modified = False  # skip saving extra fields
            return state.as_dict()

    @Handler.method()
    def get_state(self):
        """
        get_state
        """
        return self.load_state()

    @staticmethod
    @Handler.method()
    def save_state(params):
        """
        save_state
        """
        state = params[0]
        with app.State(AppRPC.APPSTATE_PATH, lock=True) as app_state:
            app_state.clear()
            app_state.update(state)
            storage = app_state.get("storage", {})
            for k in AppRPC.IGNORE_STORAGE_KEYS:
                if k in storage:
                    del storage[k]
        return True

    @staticmethod
    @Handler.method()
    def save_chip_config(params):
        """
        save_chip_config
        """
        data = json.loads(params[0])
        json_path = os.path.join(params[1], AppRPC.OUTPUT_CONFIG)
        if os.path.exists(json_path):
            with open(json_path, 'r', encoding="utf-8") as file_handle:
                output_data = json.load(file_handle)
                data['info'] = output_data['info']

            flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
            with os.fdopen(os.open(json_path, flags, 0o644), 'w',
                           encoding='utf-8') as file_handle:
                json.dump(data, file_handle, indent=4)

    @staticmethod
    @Handler.method()
    def open_web_browser(params):
        webbrowser.open(params[0])


    @staticmethod
    @Handler.method()
    def update_chip_config(params):
        """
        save_chip_config
        """
        data = json.loads(params[0])
        update_gpio_config(data)
        update_dma_setting(data)
        return data


def update_gpio_config(data):
    """
    gpio config
    """
    gpio_config = {}
    try:
        for gpio in data["all"]["GPIO Settings"]:
            level = data["all"]["GPIO Settings"][gpio]["Level"]
            direction = data["all"]["GPIO Settings"][gpio]["Direction"]
            interrupt_mode = data["all"]["GPIO Settings"][gpio]["InterruptMode"]

            register = data["all"]["GPIO Settings"][gpio]["register"]
            if register not in gpio_config:
                gpio_config[register] = {}

            key = f"{level},{direction},{interrupt_mode}"
            value = data["all"]["GPIO Settings"][gpio]["GpioName"]

            if key not in gpio_config[register]:
                gpio_config[register][key] = {"config": gpio, "pins": [value]}
            else:
                gpio_config[register][key]["pins"].append(value)

        data["all"]["GPIO Config"] = gpio_config
    except KeyError:
        return


def update_dma_setting(data):
    """
    dma module
    """
    try:
        for module, dma in data["all"]["DMA Settings"].items():
            if not dma:
                continue
            data["all"]["DMA Settings"][module]["module"] = module.split('_', 1)[
                0].strip(string.digits)
    except KeyError:
        return
