import os
import re
import click
import shutil
import time
import collections
import codecs
import bottle
import subprocess
from os.path import (join, realpath, isdir, basename, dirname)
from platformio.commands.scaffold.helpers import (replace)
from platformio.helpers import (get_installed_core_path, cal_relative_path)
from platformio.commands.dotting.helpers import TraceOperate, ScaffoldTrace
from platformio.util import read_url_json


ScaffoldArgs = collections.namedtuple('ScaffoldArgs',
    ['project_dir', 'vendor', 'product_name', 'board', 'inherit_path', 'ohos_ver', 'device_vendor', 'git_init'])
PRODUCT_DEV_LINK = read_url_json().get('gitee_subsys_build_mini_lite_url', '')


@click.group(short_help="Scaffold for product and device")
def cli():
    pass


@cli.command("gen-product", short_help="Generate Product Scaffolding")
@click.option(
    '-d',
    '--project-dir',
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option('--vendor', required=True)
@click.option('-p', '--product-name', required=True)
@click.option(
    '-i',
    '--inherit-path',
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option('-b', '--board', required=True)
@click.option('-s', '--ohos-ver', required=True)
@click.option('-t', '--sys-type')
@click.option('--device-vendor')
@click.option('-g', '--git-init', is_flag=True)
def generate_product_scaffold(**kwargs):
    _generate_product(**kwargs)


@cli.command("gen-device", short_help="Generate Device Scaffolding")
@click.option(
    '-d',
    '--project-dir',
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option('--device-vendor')
@click.option('-b', '--board', required=True)
@click.option('-s', '--ohos-ver', required=True)
@click.option('-k', '--kernel')
@click.option('-c', '--compiler-prefix')
@click.option('-g', '--git-init', is_flag=True)
def generate_device_board(**kwargs):
    _generate_device(**kwargs)


@cli.command("generate", short_help="Generate Product and Device Scaffolding")
@click.option(
    '-d',
    '--project-dir',
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option('--vendor', required=True)
@click.option('-p', '--product-name', required=True)
@click.option(
    '-i',
    '--inherit-path',
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option('-b', '--board', required=True)
@click.option('-s', '--ohos-ver', required=True)
@click.option('-t', '--sys-type')
@click.option('--device-vendor')
@click.option('-g', '--git-init', is_flag=True)
@click.option('-k', '--kernel')
@click.option('-c', '--compiler-prefix')
def generate_scaffold(**kwargs):
    _generate_device(**kwargs)
    click.echo('\n')
    _generate_product(**kwargs)


def _generate_product(**kwargs):
    project_dir = kwargs.get('project_dir')
    vendor = kwargs.get('vendor')
    product_name = kwargs.get('product_name')
    board = kwargs.get('board')
    inherit_path = kwargs.get('inherit_path')
    ohos_ver = kwargs.get('ohos_ver')
    sys_type = kwargs.get('sys_type')
    device_vendor = kwargs.get('device_vendor')
    git_init = kwargs.get('git_init')
    if sys_type == 'standard':
        pass
    else:
        scaffold_args = ScaffoldArgs(
            project_dir, vendor, product_name, board, inherit_path, ohos_ver, device_vendor, git_init)
        TraceOperate(ScaffoldTrace).operate(
            'Scaffold',
            'add',
            vendor,
            product_name,
            board,
            basename(inherit_path) if inherit_path else 'none')
        _handle_mini_small_scaffold(scaffold_args)


def _handle_mini_small_scaffold(scaffold_args):
    project_dir = scaffold_args.project_dir
    target_path = realpath(join(project_dir, 'vendor', scaffold_args.vendor, scaffold_args.product_name))
    if isdir(target_path) and os.listdir(target_path):
        click.echo('Product exists. Quit')
        return
    shutil.rmtree(target_path, ignore_errors=True)
    ohos_ver = scaffold_args.ohos_ver
    if scaffold_args.inherit_path:
        src_tmpl_path = scaffold_args.inherit_path
    else:
        ohos_ver = re.sub(r'\D*(\d+)\..+', lambda match: f'{match.group(1)}.x', ohos_ver)
        src_tmpl_path = join(get_installed_core_path(), 'core', 'tool_utils', 'scaffold', ohos_ver, 'product')

    src_tmpl_path = realpath(src_tmpl_path)
    src_relative_path = cal_relative_path(src_tmpl_path, project_dir)
    src = click.style(src_relative_path)
    des_relative_path = cal_relative_path(target_path, project_dir)
    des = click.style(des_relative_path, bold=True, fg='blue')
    click.secho(f"{click.style('Generate product', fg='blue')}: {des_relative_path}", bold=True)
    click.echo(f'Done: copy {src} to {des}')
    shutil.copytree(src_tmpl_path, target_path)
    click.echo()
    gn_path = realpath(join(target_path, 'BUILD.gn'))
    click.echo(f'Done: Handle {cal_relative_path(gn_path, project_dir)}')
    _patch_build_gn(gn_path, scaffold_args.product_name)
    click.echo()
    config_path = realpath(join(target_path, 'config.json'))
    click.echo(f'Done: Handle {cal_relative_path(config_path, project_dir)}')
    _patch_config_json(config_path, scaffold_args.vendor, scaffold_args.product_name,
        scaffold_args.board, scaffold_args.device_vendor)

    if not scaffold_args.inherit_path:
        _handle_tmpl_scaffold(ohos_ver, target_path, project_dir, scaffold_args.board)

    if scaffold_args.git_init:
        click.echo()
        _git_init(dirname(target_path))

    click.secho(f'Done: Generate product', fg='blue', bold=True)
    link = click.style(PRODUCT_DEV_LINK, fg='green')
    click.secho(f'You can continue developing the product by following the link: {link}', bold=True)
    click.echo()


def _git_init(target_path):
    try:
        subprocess.run(['git', 'init'], cwd=target_path)
    except Exception:
        click.secho(f'git init failed', fg='yellow', bold=True)


def _handle_tmpl_scaffold(ohos_ver, target_path, project_dir, board):
    if ohos_ver == '1.x':
        param_path = join(target_path, 'hals', 'utils', 'sys_param', 'hal_sys_param.c')
        click.echo()
        click.echo(f'Done: Handle {cal_relative_path(param_path, project_dir)}')
        _patch_sys_param(param_path)
    elif ohos_ver == '3.x':
        support_hdf_vendors = ['fnlink', 'goodix', 'lango']
        found = any(
            [isdir(join(project_dir, 'device', 'board', v, board)) for v in support_hdf_vendors]
        )
        if not found:
            hdf_config_path = join(target_path, 'hdf_config')
            kernel_config_path = join(target_path, 'kernel_configs')
            click.echo()
            click.echo('Done: Remove redundant directory')
            click.echo(f'\tRemove {cal_relative_path(hdf_config_path, project_dir)}')
            shutil.rmtree(hdf_config_path)
            click.echo(f'\tRemove {cal_relative_path(kernel_config_path, project_dir)}')
            shutil.rmtree(kernel_config_path)


def _patch_build_gn(config_path, product_name):
    with os.fdopen(os.open(config_path, os.O_RDWR, 0o640), "r+") as config_file:
        data = config_file.read()
        data = replace(r'group\s*\(".+"\)', f'group("{product_name}")', data)
        config_file.seek(0)
        config_file.truncate()
        config_file.write(data)


def _patch_config_json(config_path, vendor, product_name, board, device_vendor):
    with os.fdopen(os.open(config_path, os.O_RDWR, 0o640), "r+") as config_file:
        data = config_file.read()
        data = replace(r'"product_name"\s*:\s*".+"', f'"product_name": "{product_name}"', data)
        data = replace(r'"product_adapter_dir"\s*:\s*"//vendor/.+/.+/hals"',
            f'"product_adapter_dir": "//vendor/{vendor}/{product_name}/hals"', data)
        if data.find(r'"board": "board_name"') >= 0 and board:
            data = replace(r'"board"\s*:\s*".+"', f'"board": "{board}"', data)
        if data.find(r'"device_company": "device_company"') >= 0 and device_vendor:
            data = replace(r'"device_company": "device_company"',
                f'"device_company": "{device_vendor}"', data)
        config_file.seek(0)
        config_file.truncate()
        config_file.write(data)


def _patch_sys_param(config_path):
    current_time = time.strftime('%Y-%m-%d', time.localtime())
    with os.fdopen(os.open(config_path, os.O_RDWR, 0o640), "r+") as config_file:
        data = config_file.read()
        data = replace(r'OHOS_SECURITY_PATCH_TAG\[\] = \{\".+\"\}',
            f'OHOS_SECURITY_PATCH_TAG[] = {{"{current_time}"}}', data)
        config_file.seek(0)
        config_file.truncate()
        config_file.write(data)


def _generate_device(**kwargs):
    project_dir = kwargs.get('project_dir')
    device_vendor = kwargs.get('device_vendor')
    board = kwargs.get('board')
    ohos_ver = kwargs.get('ohos_ver')
    kernel = kwargs.get('kernel')
    compiler_prefix = kwargs.get('compiler_prefix')
    git_init = kwargs.get('git_init')

    ohos_ver = re.sub(r'\D*(\d+)\..+', lambda match: f'{match.group(1)}.x', ohos_ver)
    device_tpl_path = realpath(join(
        get_installed_core_path(),
        'core', 'tool_utils', 'scaffold', ohos_ver or '1.x', 'device'))
    target_path = realpath(join(project_dir, 'device', device_vendor, board))

    if isdir(target_path) and os.listdir(target_path):
        click.echo('Device exists. Quit')
        return

    des_relative_path = cal_relative_path(target_path, project_dir)
    des = click.style(des_relative_path, bold=True, fg='blue')
    click.secho(f"{click.style('Generate device board', fg='blue')}: {des_relative_path}", bold=True)
    shutil.copytree(device_tpl_path, target_path)
    click.echo(f'Done: copy {device_tpl_path} to {des}')
    config_tpl_path = join(target_path, 'sdk_liteos', 'config.gni')
    build_tpl_path = join(target_path, 'BUILD.gn')
    with codecs.open(config_tpl_path, "r+", encoding="utf8") as fp:
        config_tpl_vars = {
            'board_toolchain_prefix': (compiler_prefix if compiler_prefix  else ''),
            'board_toolchain_type': ('gcc' if compiler_prefix else ''),
            'kernel': kernel
        }
        content = bottle.template(fp.read(), **config_tpl_vars)
        fp.seek(0)
        fp.truncate()
        fp.write(content)

    with codecs.open(build_tpl_path, "r+", encoding="utf8") as fp:
        build_tpl_vars = {
            'board_name': board,
        }
        content = bottle.template(fp.read(), **build_tpl_vars)
        fp.seek(0)
        fp.truncate()
        fp.write(content)

    if git_init:
        click.echo()
        _git_init(dirname(target_path))

    click.secho(f'Done: Generate device board', fg='blue', bold=True)
