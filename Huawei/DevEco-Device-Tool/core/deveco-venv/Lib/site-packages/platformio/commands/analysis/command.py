import json
import os

import click

from platformio.commands.exception import (PlatformioFileNotFound,
                                           PlatformioJSONDecodeError, UnknownError)

JSON_DIR = 'analyzerJson'
JSON_NAME = 'memoryDetails.json'
IMAGE_JSON2CSV_SECTION_KEY = "sectionKeys"
IMAGE_JSON2CSV_ROOT_KEY = "folderTree"
IMAGE_JSON2CSV_NAME_KEY = "objName"
IMAGE_JSON2CSV_SUMSIZE_KEY = "sumSize"
IMAGE_JSON2CSV_CHILDREN_KEY = "children"


@click.group(short_help="Analysis support")
def cli():
    pass


@cli.command("get-image-folder-data", short_help="get folder data for image analysis")
@click.option(
    "-d",
    "--project-dir",
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
    required=True
)
@click.option("--json-output", is_flag=True)
def get_image_folder_data(project_dir, json_output):
    result = {"success": False, "data": "getImageFolderFail"}
    json_path = os.path.join(project_dir, JSON_DIR, JSON_NAME)

    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            json_content = json.loads(f.read())
            result['data'] = image_json_by_dir2csv(json_content)
            result['success'] = True
    except FileNotFoundError:
        result['data'] = "analysisJsonNotFound"
        PlatformioFileNotFound(f'get image folder data error: {json_path} not found')
    except json.JSONDecodeError:
        result['data'] = "analysisDataError"
        PlatformioJSONDecodeError('get image folder data error: json decode error')
    except Exception:
        UnknownError('get image folder data error')

    if json_output:
        click.echo(json.dumps(result))
    else:
        click.echo(result)


def image_json_by_dir2csv(content):
    folder_data = content.get(IMAGE_JSON2CSV_ROOT_KEY, [])
    if not folder_data:
        return []
    # Record the directory structure and the value of section_keys of each item.
    dir_items, value_items = [], []
    # Obtains the key value to be recorded.
    section_keys = content.get(IMAGE_JSON2CSV_SECTION_KEY, [])
    key_order = [IMAGE_JSON2CSV_SUMSIZE_KEY]
    key_order.extend(section_keys)
    # Records all directory levels and obtains the maximum value.
    ranks = [0]

    def parse_json(json_data, rank):
        for data in json_data:
            name_key = data.get(IMAGE_JSON2CSV_NAME_KEY, "")
            dir_items.append((rank, [''] * rank + [name_key]))

            value = []
            for k in key_order:
                value.append(data.get(k, 0))
            value_items.append(value)

            children = data.get(IMAGE_JSON2CSV_CHILDREN_KEY, None)
            if children:
                ranks.append(rank + 1)
                parse_json(children, rank + 1)

    parse_json(folder_data, 0)
    max_rank = max(ranks) + 1
    lines = list()
    table_header = [''] * max_rank
    table_header.extend(key_order)
    lines.append(table_header)
    for i, (rank, content) in enumerate(dir_items):
        line = content + [''] * (max_rank - rank - 1) + value_items[i]
        lines.append(line)
    return lines
