import json
import os
import click
import hb_adapter  # pylint: disable=import-error
from platformio.managers.platform import PlatformManager
from platformio.commands.doctor.helpers import get_kernel_config_file_path
from platformio.commands.exception import UnknownError


@click.group(short_help="OHOS Build Tool")
def cli():
    pass


@cli.command("products", short_help="Show all hb products in the current project")
@click.option(
    "--project-dir",
    "-d",
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option("--detail", is_flag=True)
@click.option("--master", "-m", default="vendor", type=click.Choice(['vendor', 'board']))
def hb_list_products(project_dir, detail, master):
    hb = hb_adapter.Hb(project_dir)
    if detail:
        result = hb.list_products_detail()
        product_mcu_map, board_mcu_map = get_platform_mcu_info()
        update_platform_mcu_of_products(result, product_mcu_map, board_mcu_map)
        if master == 'board':
            result = get_board_lits(result)
  
        click.echo(json.dumps(result if result else {}, indent=4))
    else:
        result = hb.list_products()
        click.echo(json.dumps(result if result else [], indent=4))


@cli.command("product", short_help="Show special product detail info")
@click.option(
    "--project-dir",
    "-d",
    default=os.getcwd,
    type=click.Path(
        exists=True, file_okay=False, dir_okay=True, writable=True, resolve_path=True
    ),
)
@click.option('-p', '--product-name', required=True)
def hb_get_product(project_dir, product_name):
    hb = hb_adapter.Hb(project_dir)
    result = hb.list_products_detail()
    target_product = {}
    for vendor in result.get('products', []):
        for product in vendor.get('product', []):
            device_path = ''
            vendor_product = f"{product.get('name')}@{vendor.get('vendor')}"
            try:
                device_path = get_kernel_config_file_path(project_dir, vendor_product)
            except Exception:
                UnknownError(vendor_product)
            product.update({
                'device_config': device_path,
                'product_config': os.path.join(product.get('product_path', ''), 'config.json')
            })
            if product_name == vendor_product:
                target_product = product
                break

    click.echo(json.dumps(target_product if target_product else {}, indent=4))


def get_board_lits(result):
    rearrange_res = {'mini': {}, 'small': {}, 'standard': {}}
    for vendor in result.get('products', []):
        for product in vendor.get('product', []):
            sys_type = product.get('type')
            board = product.get('board', '')
            product_name = product.get('name', '')
            if board not in rearrange_res.get(sys_type, {}):
                rearrange_res.get(sys_type).update({board: {}})
            rearrange_res.get(sys_type).get(board).update({product_name: product})

    if not rearrange_res.get('mini', {}):
        del rearrange_res['mini']
    if not rearrange_res.get('small', {}):
        del rearrange_res['small']
    # not support standard yet
    del rearrange_res['standard']
    return rearrange_res


def get_platform_mcu_info():
    product_mcu_map = {}
    board_mcu_map = {}
    for board_info in PlatformManager().get_installed_boards():
        handle_platform_info(board_info, product_mcu_map, board_mcu_map)

    return product_mcu_map, board_mcu_map


def handle_platform_info(board_info, product_mcu_map, board_mcu_map):
    for frk in board_info.get('frameworks', []):
        if frk.get('name', '') == 'ohos-sources':
            product_name = frk.get('build', {}).get('product_name', '')
            if product_name:
                product_mcu_map[f'{product_name}@built-in'] = {
                    'platform': board_info.get('platform'),
                    'mcu': board_info.get('mcu')}
        if frk.get('name', '') == 'hb':
            products = frk.get('products', [])
            def_product = frk.get('build', {}).get('product', '')
            products.extend([def_product] if def_product else [])
            for product in products:
                product_mcu_map[product] = {
                    'platform': board_info.get('platform'),
                    'mcu': board_info.get('mcu')}
            board_alias = frk.get('board_alias', [])
            for board in board_alias:
                board_mcu_map[board] = {
                    'platform': board_info.get('platform'),
                    'mcu': board_info.get('mcu')}


def update_platform_mcu_of_products(detail_products, product_mcu_map, board_mcu_map):
    for vendor in detail_products.get('products', []):
        vendor_name = vendor.get('vendor')
        for product in vendor.get('product', []):
            board = product.get('board')
            if board == 'hispark_taurus' and product.get('kernel') == 'linux':
                board = 'hispark_taurus_linux'
            product.update({
                'match_mcu': product_mcu_map.get(
                    f"{product.get('name')}@{vendor_name}",
                    board_mcu_map.get(board, {'platform': 'blank', 'mcu': 'blank'})
                )
            })
