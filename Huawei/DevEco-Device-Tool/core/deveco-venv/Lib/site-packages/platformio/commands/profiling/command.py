import json
import sys
from os import environ
import click
import serial

from platformio.commands.profiling.parsers.ParserV0 import ParserV0
from platformio.rpc.helpers import execute_remote_command
from platformio.commands.exception import PlatformioFileNotFound,UnknownError


@click.group(short_help="Profiling support")
def cli():
    pass


@cli.command("load", short_help="Load profiling data from file")
@click.argument('filename')
def profiling_load(filename):
    with open(filename, 'rb') as raw:
        data = raw.read()
        parser = ParserV0()
        parsed = parser.parse_chunk(data)
        if parsed is not None:
            click.echo(json.dumps(parsed))
        else:
            err_out = f'No profiling data found in file {filename}'
            raise PlatformioFileNotFound(err_out)


@cli.command("collect", short_help="collect profiling data from device")
@click.option("--port", "-p", help="Port, a number or a device name")
@click.option("--baud", "-b", type=int, help="Set baud rate, default=9600", default=9600)
@click.pass_context
def profiling_collect(ctx, port, baud):
    force_local = not environ.get('DEVECO_REMOTE_SERVER_PORT', False)
    if not force_local:
        execute_remote_command(command=['hos'] + sys.argv[1:], project_dir=None, files=[])
        return

    try:
        stop = ctx.obj.get('stop_event')

        sp = serial.Serial(port=port, baudrate=baud, timeout=0.1)
        parser = ParserV0()
        handle_collect_profiling_data(stop, parser, sp)
    except Exception as e:
        UnknownError(e)
        raise click.exceptions.ClickException('profiling collect error') from e


def handle_collect_profiling_data(stop, parser, sp):
    while not stop or not stop.is_set():
        parsed = parser.parse_chunk(sp.read())
        if parsed is not None:
            for fr in parsed:
                click.echo(json.dumps(fr))
