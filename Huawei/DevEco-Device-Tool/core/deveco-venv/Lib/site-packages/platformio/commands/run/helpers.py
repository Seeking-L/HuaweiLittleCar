# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os.path
from os import makedirs
from os.path import isdir, isfile, join

import click
import json
import re

from platformio import fs, exception
from platformio.project.helpers import compute_project_checksum, get_project_dir
from platformio.managers.platform import PlatformFactory
from platformio import (proc)


def handle_legacy_libdeps(project_dir, config):
    legacy_libdeps_dir = join(project_dir, ".devecolibdeps")
    if not isdir(legacy_libdeps_dir) or legacy_libdeps_dir == config.get_optional_dir(
            "libdeps"
    ):
        return
    if not config.has_section("env"):
        config.add_section("env")
    lib_extra_dirs = config.get("env", "lib_extra_dirs", [])
    lib_extra_dirs.append(legacy_libdeps_dir)
    config.set("env", "lib_extra_dirs", lib_extra_dirs)
    click.secho(
        "DEPRECATED! A legacy library storage `{0}` has been found in a "
        "project. \nPlease declare project dependencies in `deveco.ini`"
        " file using `lib_deps` option and remove `{0}` folder."
            .format(legacy_libdeps_dir), fg="yellow",
    )


def handle_file_path(checksum_file, checksum, flag):
    if isfile(checksum_file):
        with open(checksum_file) as fp:
            if fp.read() == checksum:
                flag = True
    return flag


def clean_build_dir(build_dir, config):
    # remove legacy ".pioenvs" folder
    legacy_build_dir = join(get_project_dir(), ".pioenvs")
    if isdir(legacy_build_dir) and legacy_build_dir != build_dir:
        fs.rmtree(legacy_build_dir)

    checksum_file = join(build_dir, "project.checksum")
    checksum_file = os.path.realpath(checksum_file)
    checksum = compute_project_checksum(config)

    if isdir(build_dir):
        # check project structure
        flag = handle_file_path(checksum_file, checksum, False)
        if flag:
            return
        fs.rmtree(build_dir)

    makedirs(build_dir)
    flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
    with os.fdopen(os.open(checksum_file, flags, 0o644), 'w') as fp:
        fp.write(checksum)


def update_partition_config(env, env_platform, project_dir, profile):
    if not os.path.isabs(profile):
        profile = os.path.join(project_dir, profile)

    if os.path.exists(profile) and os.path.isfile(profile):
        try:
            p = PlatformFactory.newPlatform(env_platform)
        except exception.UnknownPlatform as e:
            click.secho('Unknown development platform', fg="yellow")
            raise exception.ReturnErrorCode(1) from e

        if hasattr(p, 'set_platform_partitions'):
            try:
                p.set_platform_partitions(env, profile)
            except Exception as e:
                click.secho('set platform partitions error', fg="yellow")
                raise exception.ReturnErrorCode(1)
        else:
            click.secho(f"{env_platform} not support use profile", fg="yellow")
            raise exception.ReturnErrorCode(1)

    else:
        click.secho('The profile is not exist, Please configure upload_partitions_profile', fg="yellow")
        raise exception.ReturnErrorCode(1)


def _echo_stdout_line(line):
    click.secho(line, fg=None, nl=False)


def _echo_stderr_line(line):
    click.secho(line, fg="red", nl=False)


def run_exec(cmd, **kwargs):
    stdout = proc.LineBufferedAsyncPipe(line_callback=_echo_stdout_line)
    stderr = proc.LineBufferedAsyncPipe(line_callback=_echo_stderr_line)
    
    default = dict(stdout=stdout,
                   stderr=stderr,
                   shell=False)
    default.update(kwargs)
    kwargs = default

    result = -1
    try:
        res = proc.exec_command(cmd, **kwargs)
        result = res['returncode'] if res['returncode'] is not None else -1
    except Exception:  # pylint: disable=broad-except
        click.secho("Failed to execute the burn command.",  fg="red")
        stdout.close()
        stderr.close()
        raise exception.ReturnErrorCode(1)

    return result


def get_burn_json_path(config, env, project_dir):
    tool_status = {}
    tools = {}
    json_path = ''
    tool_path = ''

    ohos_version = config.get('env', 'ohos_version', '')
    framework = config.get('env', 'framework', [])
    product = config.get('env:' + env, 'board_frameworks.hb.build.product', '') \
        if 'hpm' not in framework else config.get("env:" + env, 'hpm_project_base_package', '')
    if ohos_version and product:
        cache_status_path = join(project_dir, '.deveco', 'status', f'{re.sub("[@/]", ".", product)}')
        tool_status = read_json_file(cache_status_path)

    if tool_status:
        tools = tool_status.get('tools', {}).get('suite_tool', {})
        json_path = tools.get('json_path', '')
        tool_path = tools.get('tool_path', '')
        tool_name = tools.get('tool_name', '')
    if not json_path:
        click.secho('Please config json path', fg="yellow")
        raise exception.ReturnErrorCode(1)
    if not tool_path:
        click.secho('Please config tool path', fg="yellow")
        raise exception.ReturnErrorCode(1)
    if tool_path.split("\\")[-1] != tool_name:
        click.secho('Adapter config file does not match Burn tool.', fg="yellow")
        raise exception.ReturnErrorCode(1)

    return json_path, tool_path


def read_json_file(input_file):
    if not os.path.exists(input_file):
        click.secho(f'{input_file} not found', fg="yellow")
        raise exception.ReturnErrorCode(1)
    with open(input_file, 'rb') as input_f:
        try:
            data = json.load(input_f)
            return data
        except json.JSONDecodeError:
            click.secho(f'{input_file} parsing error!', fg="yellow")
            raise exception.ReturnErrorCode(1)
