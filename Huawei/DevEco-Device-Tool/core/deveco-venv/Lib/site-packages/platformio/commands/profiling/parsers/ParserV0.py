from platformio.commands.profiling.parsers.BaseParser import BaseParser


class ParserV0(BaseParser):
    FRAME_START = b'+profiling'
    FRAME_STOP = b'-profiling'

    @staticmethod
    def __parse_line(line):
        kv = line.split('=')
        if len(kv) == 2:
            val = kv[1].split(',')
            return kv[0], val if len(val) > 1 else val[0]
        return None, None

    def _parse_pending(self):
        result = []
        while len(self._pending_buffer) > 0:
            start = self._pending_buffer.find(self.FRAME_START)
            end = self._pending_buffer.find(self.FRAME_STOP)
            if start < 0 or end < 0:
                break
            try:
                frame = self._pending_buffer[start:end].decode('utf8')
                self._pending_buffer = self._pending_buffer[end + len(self.FRAME_STOP):]
                frame = frame[frame.rfind('+profiling'):]
                parsed_frame = {'tasks': []}
                for line in [x.strip() for x in frame.splitlines()]:
                    self.handle_parse_data(line, parsed_frame)
                if 'heap' in parsed_frame:
                    r = {'type': 'heap', 'timestamp': parsed_frame['timestamp']}
                    r.update(parsed_frame['heap'])
                    result.append(r)
                if 'resources' in parsed_frame:
                    r = {'type': 'resources', 'timestamp': parsed_frame['timestamp']}
                    r.update(parsed_frame['resources'])
                    result.append(r)
                for task in parsed_frame['tasks']:
                    r = {'type': 'task', 'timestamp': parsed_frame['timestamp']}
                    r.update(task)
                    result.append(r)
            except Exception as e:  # pylint: disable=broad-except
                result.append({'type': 'parsing-info', 'message': f'Exception {e.__repr__()}'})

        return result if len(result) > 0 else None

    def handle_parse_data(self, line, parsed_frame):
        name, value = self.__parse_line(line)
        if name == 'rtc':
            parsed_frame['timestamp'] = int(value)
        elif name == 'mem':
            parsed_frame['heap'] = {'size': int(value[0], 0),
                                    'used': int(value[1], 0),
                                    'peak': int(value[2], 0)}
        elif name == 'os_resource':
            parsed_frame['resources'] = {'timers': int(value[0], 0),
                                         'tasks': int(value[1], 0),
                                         'semaphores': int(value[2], 0),
                                         'queues': int(value[3], 0),
                                         'mux': int(value[4], 0),
                                         'events': int(value[5], 0)}
        elif name == 'task':
            parsed_frame['tasks'].append({'name': value[0],
                                          'id': value[1],
                                          'status': value[2],
                                          'priority': int(value[3], 0),
                                          'size': int(value[4], 0),
                                          'used': int(value[5], 0),
                                          'peak': int(value[6], 0)})
