import os
from platformio.rpc.client_console import Console
from platformio.rpc.client_file_transfer import FileTransfer
from platformio.rpc.client import Client
from platformio.compat import OS
import click
import platformio.commands.debug.process.server


class RemoteDebugServer(platformio.commands.debug.process.server.DebugServer):
    # pylint: disable=too-many-arguments
    def __init__(self, project_dir, env, variables, debug_options, prog_path, origin_command):
        super().__init__(project_dir=project_dir, env=env,
                         variables=variables, debug_options=debug_options)
        self.__command = ['hos'] + origin_command[1:] + ['--force-local']

    def run(self):
        async def on_connected(transport):
            click.secho('Debug Server Connected', fg='cyan')
            await transport.session.open(project_path=self.project_dir, system=OS)
            absolute_file_path = os.path.join(self.project_dir, os.path.join('.deveco', 'deveco.ini'))
            await FileTransfer(transport=transport).upload(absolute_file_path)
            await transport.file_transfer.deveco_mapping(
                deveco_path=os.path.join(self.project_dir, ".deveco", "deveco.ini"))
            return await Console(transport=transport).execute(self.__command)

        self.generate_pio_init()
        return Client(on_connected=on_connected).start()

    @staticmethod
    def download_files(project_path, files):
        async def on_connected(transport):
            await transport.session.open(project_path=project_path, system=OS)
            for f in files:
                await FileTransfer(transport=transport).download(f)

        Client(on_connected=on_connected).start()
