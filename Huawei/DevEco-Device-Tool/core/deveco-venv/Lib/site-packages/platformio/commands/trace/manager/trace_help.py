
TASK_COLORS = [
    "#ec739c",
    "#8367ab",
    "#a8ca7f",
    "#ec6e53",
    "#e2ada2",
    "#9e865e",
    "#e7af8c",
    "#abbc82",
    "#a8c0d4",
    "#ece57e",
    "#e38700",
    "#fcddae",
    "#c3caa8",
    "#007392",
    "#cfb2c2",
    "#ee9ca3",
    "#f9c26f",
    "#79bec4"
]

EVENT_COLORS = [
    "#f88546",
    "#e6bb2f",
    "#88afce",
    "#a7a6f2",
    "#736195",
    "#ffb991",
    "#fb8371",
    "#ff6b8c",
    "#db4646",
    "#e06d53",
    "#ffaf51",
    "#97c251",
    "#50bf84",
    "#51c2c2",
    "#4b84c6",
    "#edb6b9",
    "#be7e7c",
    "#c089b3",
    "#8e4c58",
    "#526959",
    "#ec739c",
    "#8367ab",
    "#a8ca7f",
    "#ec6e53",
    "#e2ada2",
    "#9e865e",
    "#e7af8c",
    "#abbc82",
    "#a8c0d4",
    "#ece57e",
    "#e38700",
    "#fcddae",
    "#c3caa8",
    "#007392",
    "#add7d2",
    "#cfb2c2",
    "#ee9ca3",
    "#f9c26f",
    "#79bec4"
]

MAX_COLOR = int("FFFFFF", 16)
IDLE_TYPE = 4
COLOR_INCRE = 66
COLOR_LEN = 6


class TraceHelper():
    def __init__(self, tcm=None, ecm=None):
        self.taskColorMap = tcm
        self.eventColorMap = ecm

    def create_color(self):
        if self.taskColorMap['baseColorId'] > len(TASK_COLORS) - 1:
            self.taskColorMap['baseColorId']  = 0
            self.taskColorMap['baseColorCount'] += 1

        taskBaseColor = TASK_COLORS[self.taskColorMap['baseColorId']]
        baseColorNumber = int(taskBaseColor.split("#")[1], 16)
        if baseColorNumber < MAX_COLOR:
            baseColorNumber += COLOR_INCRE * self.taskColorMap['baseColorCount']
        if baseColorNumber >= MAX_COLOR:
            baseColorNumber = MAX_COLOR
        color = "#" + hex(baseColorNumber)[2:]
        if color in self.taskColorMap.values():
            color = self.create_color()
        self.taskColorMap['baseColorId'] += 1
        return color

    def create_event_colot(self):
        baseColorNumber = int(self.eventColorMap['baseColor'].split("#")[1], 16)
        if baseColorNumber < MAX_COLOR:
            baseColorNumber += COLOR_INCRE
        if baseColorNumber >= MAX_COLOR:
            baseColorNumber = MAX_COLOR
        color = hex(baseColorNumber)[2:]
        pre = ''
        if len(color) < COLOR_LEN:
            pre = "000000"[:COLOR_LEN - len(color)]
        color = "#" + pre + color
        self.eventColorMap['baseColor'] = color
        if color in self.eventColorMap.values():
            color = self.create_event_colot()
        return color

    def get_task_color(self, taskType, taskId):
        if taskType == IDLE_TYPE:
            return "#a8dadc"
        taskIdt = str(taskType) + "#" + taskId
        if taskIdt not in self.taskColorMap:
            if len(self.taskColorMap) < len(TASK_COLORS):
                self.taskColorMap[taskIdt] = TASK_COLORS[len(self.taskColorMap)]
            else:
                self.taskColorMap[taskIdt] = self.create_color()
        return self.taskColorMap[taskIdt]

    def get_event_color(self, taskType, taskId):
        if taskType == IDLE_TYPE:
            return "#5a5b5c"
        taskIdt = str(taskType) + "#" + taskId
        if taskIdt not in self.eventColorMap:
            if len(self.eventColorMap) < len(EVENT_COLORS):
                self.eventColorMap[taskIdt] = EVENT_COLORS[len(self.eventColorMap)]
            else:
                self.eventColorMap[taskIdt] = self.create_event_colot()
        return self.eventColorMap[taskIdt]
