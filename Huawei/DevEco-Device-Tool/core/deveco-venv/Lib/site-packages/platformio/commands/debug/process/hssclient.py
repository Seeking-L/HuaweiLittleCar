# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import subprocess
import threading
import platformio.commands.debug.process.base
import platformio.commands.debug.exception


class HSSClient(platformio.commands.debug.process.base.BaseProcess):
    # pylint: disable=too-many-arguments
    def __init__(self, project_dir, env, variables, hssclient_path, args):
        super().__init__(project_dir=project_dir, env=env, variables=variables)
        self.hssclient_path = hssclient_path
        self.args = self.apply_variables(list(args))
        self.prog_path = variables['PROG_PATH']
        self.exit_cmds = variables['EXIT_CMDS'] + \
            '\n' if variables['EXIT_CMDS'] else 'monitor shutdown\n'

    def run(self):
        args = ['piogdb', '3333'] + self.args
        hss_process = subprocess.Popen(executable=self.hssclient_path,
                                       args=args,
                                       env=os.environ,
                                       cwd=self.project_dir,
                                       stdout=None,
                                       stderr=None,
                                       stdin=subprocess.PIPE)

        stdin_capture_thread = threading.Thread(target=self.stdin_parser,
                                                args=[hss_process])
        stdin_capture_thread.start()
        stdin_capture_thread.join()
        if hss_process.poll() is None:  # process is still alive, kill it
            hss_process.terminate()
        return hss_process.returncode if hss_process.returncode else 0

    @staticmethod
    def stdin_parser(process):
        while process.poll() is None:
            data = sys.stdin.readline()
            process.stdin.write(data.encode())
            process.stdin.flush()
