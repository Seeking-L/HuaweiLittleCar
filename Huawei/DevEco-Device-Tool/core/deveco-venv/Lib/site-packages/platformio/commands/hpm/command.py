#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
Description: HPM Api
Create: 2021-08-23
"""

import os
import subprocess
import json
import click
import shutil
import time
from datetime import datetime, timedelta, timezone
import hpm_adapter  # pylint: disable=import-error

from .helpers import retry
from platformio.proc import LineBufferedAsyncPipe
from platformio.proc import ByteBufferedAsyncPipe
from platformio.commands.dotting.helpers import TraceOperate, HpmTrace
from platformio.helpers import get_config_json_path, get_installed_core_path
from platformio.commands.exception import HPMCommandError,PlatformioFileNotFound,\
    PlatformioJSONDecodeError,UnknownError


class ClickOut(LineBufferedAsyncPipe):
    def __init__(self):
        super().__init__(lambda line: click.echo(line, nl=False))


class ClickByteOut(ByteBufferedAsyncPipe):
    def __init__(self):
        self.__str = []
        super().__init__(self.lambdaLine)

    def lambdaLine(self, line):
        click.echo(line, nl=False)
        self.__str.append(line)

    def str(self):
        return ''.join(self.__str)


class StringOut(LineBufferedAsyncPipe):
    def __init__(self):
        self.__str = []
        super().__init__(self.__str.append)

    def str(self):
        return ''.join(self.__str)


@click.group(short_help="HarmonyOS Package Manager")
def cli():
    pass


@cli.command("version", short_help="Show adapter and HPM version")
@click.option("--json-output", is_flag=True)
def hpm_version(json_output):
    if not json_output:
        click.echo('hpm-adapter = {}'.format(hpm_adapter.__version__))
        click.echo('hpm-cli = {}'.format(hpm_adapter.Hpm(stderr=ClickOut()).version))
    else:
        out = {'hpm-adapter': hpm_adapter.__version__,
               'hpm-cli': hpm_adapter.Hpm().version}
        click.echo(json.dumps(out, indent=4))


@cli.command("install", short_help="Install bundle")
@click.option("--project", required=False, help='Target project path. Omit for global installation')
@click.option("--name", required=True, help='Name of bundle to install')
@click.option("--rm-bundles", is_flag=True, help='Remove ohos_bundles directory before installing')
@retry(times=3, delay=10, exceptions=HPMCommandError)
def hpm_install(project, name, rm_bundles):
    if rm_bundles:
        shutil.rmtree(os.path.join(project, 'ohos_bundles'), ignore_errors=True)
    stderr = ClickByteOut()
    hpm = hpm_adapter.Hpm(stdout=ClickOut(), stderr=stderr)
    start_time = time.time()
    if not hpm.install(name=name, target=project):
        TraceOperate(HpmTrace).operate("Hpm", "install", name, False, project, start_time, time.time(), stderr.str())
        err_out = 'Failed to install {}'.format(name) + (": {}".format(stderr.str()) if stderr.str() else '')
        raise HPMCommandError(err_out)
    TraceOperate(HpmTrace).operate("Hpm", "install", name, True, project, start_time, time.time(), '')
    click.echo("Bundle {} is installed".format(name))


@cli.command("uninstall", short_help="Uninstall bundle")
@click.option("--project", required=False, help='Target project path. Omit for global uninstall')
@click.option("--name", required=True, help='Name of bundle to uninstall')
def hpm_uninstall(project, name):
    stderr = StringOut()
    hpm = hpm_adapter.Hpm(stdout=ClickOut(), stderr=stderr)
    if not hpm.uninstall(name=name, target=project):
        TraceOperate(HpmTrace).operate("Hpm", "uninstall", name, False, project)
        err_out = 'Failed to uninstall {}: {}'.format(name, stderr.str())
        raise HPMCommandError(err_out)

    TraceOperate(HpmTrace).operate("Hpm", "uninstall", name, True, project)
    click.echo("Bundle {} is uninstalled".format(name))


@cli.command("update", short_help="Update bundle(s)")
@click.option("--project", required=False, help='Target project path. Omit for global update')
@click.option("--name", required=False, help='Name of bundle to update. Omit for all')
def hpm_update(project, name):
    stderr = StringOut()
    hpm = hpm_adapter.Hpm(stdout=ClickOut(), stderr=stderr)
    if not hpm.update(name=name, target=project):
        TraceOperate(HpmTrace).operate("Hpm", "update", name, False, project)
        err_out ='Failed to update {}: {}'.format(name, stderr.str())
        raise HPMCommandError(err_out)
    TraceOperate(HpmTrace).operate("Hpm", "update", name, True, project)


def __load_bundle_details(bundle, path, version):
    hpm = hpm_adapter.Hpm()
    for prj_path in [path, hpm.config['globalRepo']] if path is not None \
            else [hpm.config['globalRepo']]:
        try:
            p = os.path.join(prj_path, 'ohos_bundles', bundle, 'bundle.json')
            details = json.loads(open(p, 'rt', encoding='utf-8').read())
            details["path"] = prj_path
            return details
        except FileNotFoundError as e:
            PlatformioFileNotFound(e)
        except json.JSONDecodeError as e:
            PlatformioJSONDecodeError(e)
    return {"name": bundle, "version": version, "path": path}


@cli.command("check-update", short_help="Check update of bundles")
@click.option("--project", required=False, help='Target project path. Omit for global check-update')
@click.option("--json-output", is_flag=True)
def hpm_check_update(project, json_output):
    stderr = StringOut()
    stdout = subprocess.PIPE if json_output else StringOut()
    hpm = hpm_adapter.Hpm(stdout=stdout, stderr=stderr)
    result = hpm.check_update(target=project)

    if result is None:
        if json_output:
            click.echo(json.dumps([], indent=4))
        return

    json_result = []
    for bundle in result:
        details = __load_bundle_details(bundle=bundle['name'],
                                        version=bundle['local'] if len(bundle['local']) != 0
                                        else bundle['global'],
                                        path=project)
        details['version_last'] = bundle['remote']
        json_result.append(details)
    click.echo(json.dumps(json_result, indent=4))


@cli.command("list", short_help="Show list of installed bundles")
@click.option("--project", required=False, help='Target project path. Omit for global list')
@click.option("--json-output", is_flag=True)
@click.option("--skip-details", is_flag=True, default=False)
def hpm_list(project, json_output, skip_details):
    stderr = StringOut()
    stdout = subprocess.PIPE if json_output else StringOut()
    hpm = hpm_adapter.Hpm(stdout=stdout, stderr=stderr)
    result = hpm.list(target=project, json_output=json_output)

    if result is None:
        if json_output:
            click.echo(json.dumps([], indent=4))
        return

    if not json_output:
        stdout.str()
    else:
        json_result = []
        for k, v in result.items():
            if not skip_details:
                json_result.append(__load_bundle_details(bundle=k, version=v, path=project))
            else:
                json_result.append({'name': k, 'version': v})
        click.echo(json.dumps(json_result, indent=4))


@cli.command("search", short_help="Search a bundle")
@click.option("--json-output", is_flag=True)
@click.option("--name", required=False, default=None, help='Bundle name to search. '
                                                           'Omit to search all')
@click.option("--per_page", required=False, default=None, help='Bundles per page')
@click.option("--page", required=False, default=None, help='Page. Omit to show all pages')
@click.option("--bundle_type", "-t", required=False, default=None, help='Search for '
                                                                        'bundles by type')
def hpm_search(json_output, name, per_page, page, bundle_type):
    per_page = int(per_page) if per_page is not None else 10
    stderr = StringOut()
    hpm = hpm_adapter.Hpm(stderr=stderr)
    result = hpm.search(name=name,
                        page=int(page) if page is not None else None,
                        per_page=per_page,
                        bundle_type=bundle_type)

    if result is None:
        click.echo(json.dumps({'error': stderr.str()}, indent=4) if json_output else
                   click.echo('error:' + stderr.str()))
        raise HPMCommandError('Failed to search: {}'.format(stderr.str()))

    # dotting when using bundle name search
    if name is not None:
        TraceOperate(HpmTrace).operate("Hpm", "search", name, result)
    else:  # no `name` is needed When user opens the HPM page for the first time
        TraceOperate(HpmTrace).operate("Hpm", "index")

    if json_output:
        click.echo(json.dumps({'page': int(page) if page is not None else 1,
                               'per_page': per_page,
                               'items': result
                               }, indent=4))
    else:
        for bundle in result:
            click.echo('=' * 30)
            click.echo(bundle['name'])
            for k, v in bundle.items():
                if k != 'name':
                    click.echo('\t{} = {}'.format(k, v))


def _combine_bundle_data(all_dists, all_solutions):
    all_bundles = []
    for dist in all_dists:
        for solution in all_solutions:
            if dist['name'] == solution['bundleName']:
                all_bundles.append(dict(dist, solution=solution))
                break
    return all_bundles


@cli.command("fetch-dist", short_help="fetch all distribution bundles")
def hpm_fetch_distibutions():
    cache_file_path = os.path.join(get_config_json_path(), 'distribution_bundles.json')
    all_bundles = []
    need_search = True
    if os.path.isfile(cache_file_path):
        bundles_info = json.load(open(cache_file_path, 'rt'))
        expiration = bundles_info.get('expiration', 0)
        all_bundles = bundles_info.get('items', [])
        if all_bundles and expiration > datetime.now(timezone.utc).timestamp():
            need_search = False

    if need_search:
        expiration = (datetime.now(timezone.utc) + timedelta(days=1)).timestamp()
        try:
            hpm = hpm_adapter.Hpm()
            all_dists = hpm.search(bundle_type='distribution') or []
            all_solutions = hpm.search(bundle_type='solution') or []
            all_bundles = _combine_bundle_data(all_dists, all_solutions)
        except Exception as e:
            UnknownError(e)
            all_bundles = []

    tmp_bundles_path = os.path.join(
        get_installed_core_path(), 'core', 'tool_utils', 'distribution_bundles.json'
    )
    if not all_bundles and os.path.isfile(tmp_bundles_path):
        bundles_info = json.load(open(tmp_bundles_path, 'rt'))
        all_bundles = bundles_info.get('items', [])

    for bundle in all_bundles:
        if (bundle["name"] == "@ohos/hispark_aries" or
                bundle["name"] == "@ohos/ip_camera_hi3518ev300" or
                bundle["name"] == "@opensource/hoperun_hm_door_3518"):
            all_bundles.remove(bundle)

    if all_bundles:
        with os.fdopen(os.open(cache_file_path, os.O_RDWR | os.O_CREAT | os.O_TRUNC, 0o640), 'w') as cache_file:
            json.dump({
                'expiration': expiration,
                'items': all_bundles
            }, cache_file, indent=4)

    click.echo(json.dumps({'total': len(all_bundles), 'items': all_bundles}, indent=4))


@cli.command("init", short_help="Create a bundle")
@click.option("--name", required=False, default=None, help='Bundle name to create.')
@click.option("--dirname", "-d", required=False, default=None, help='Directory where '
                                                                    'the project to create is.')
@click.option("--template", "-t", required=False, default=None, help='Template used to '
                                                                     'create the project')
def hpm_init(name, dirname, template):
    stderr = StringOut()
    stdout = StringOut()
    hpm = hpm_adapter.Hpm(stdout=stdout, stderr=stderr)
    try:
        result = hpm.init(name=name, dirname=dirname, template=template)
        if not result:
            raise click.exceptions.ClickException('Failed to init: {}'.format(stderr.str()))
        click.echo(stdout.str())
    except ValueError as error:
        click.echo('hpm init error')
    except click.ClickException as error:
        error.show()
