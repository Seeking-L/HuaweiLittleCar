import os
import json
import click
import subprocess
from typing import List
from xml.etree import ElementTree
from platformio.project.config import ProjectConfig
from platformio.commands.exception import PlatformioJSONDecodeError, PlatformioCloneCodeError


def create_remote(remotes: dict, root: ElementTree.Element, remote_url: str):
    remote_name = f"remote_{str(len(remotes.keys()) + 1)}"
    remote = ElementTree.Element('remote', {
        "fetch": remote_url,
        "name": remote_name,
        "review": remote_url,
    })
    root.append(remote)
    remotes[remote_url] = remote_name


def create_project_element(root: ElementTree.Element, project_form: dict):
    remote_name = project_form.get("remote")
    project_form['remote'] = remote_name
    project = ElementTree.Element('project', project_form)
    root.append(project)


def get_profile_xml_path(project: str):
    deveco_ini: str = os.path.join(project, '.deveco', 'deveco.ini')
    config = ProjectConfig.get_instance(deveco_ini)
    return os.path.join(project, '.repo', 'manifests', config.get('env', "download_profile")[:-3] + 'xml')


def get_remote_url_of_local_repo(local_path):
    if not os.path.exists(os.path.join(local_path, '.git')):
        return ''
    try:
        remote_name = subprocess.check_output(
            ['git', 'remote'],
            cwd=local_path, stderr=subprocess.DEVNULL)
        remote_url = subprocess.check_output(
            ['git', 'remote', 'get-url', remote_name.decode().strip()],
            cwd=local_path, stderr=subprocess.DEVNULL)
    except (subprocess.CalledProcessError, FileNotFoundError):
        return ''
    return (remote_url.decode().strip() + '.git')


def get_branch_of_local_repo(local_path):
    if not os.path.exists(os.path.join(local_path, '.git')):
        return ''
    try:
        branch = subprocess.check_output(
            ['git', 'symbolic-ref', '--short', 'HEAD'],
            cwd=local_path, stderr=subprocess.DEVNULL)
    except (subprocess.CalledProcessError, FileNotFoundError):
        return ''
    return branch.decode().strip()


def check_file_exist(*args: str):
    for file in args:
        if not os.path.exists(file):
            return (False, file)
    return (True, '')


def get_product_company_and_board_company_name(bundle_json_path: str):
    with open(bundle_json_path, 'r') as f:
        try:
            bundle_json = json.load(f)
        except json.decoder.JSONDecodeError as e:
            raise PlatformioJSONDecodeError(e)

    # vendor
    product_name = bundle_json.get("chipDefinition", {}).get("baseInfo", {}).get("productCompany")
    # device
    device_name = bundle_json.get("chipDefinition", {}).get("baseInfo", {}).get("boardCompany")
    return product_name, device_name


def check_exist_repos(*args: str):
    for path in args:
        if not os.path.isdir(os.path.join(path, '.git')):
            return False

    return True


def serialized_manifest_data(project: str, product_company_name: str, board_company_name: str):
    vendor_company = os.path.join('vendor', product_company_name)
    device_company = os.path.join('device', board_company_name)
    vendor_company_path = os.path.join(project, vendor_company)
    device_company_path = os.path.join(project, device_company)
    return {
        'vendor': {
            "revision": get_branch_of_local_repo(vendor_company_path) or 'master',
            "repoAddress": get_remote_url_of_local_repo(vendor_company_path),
            "path": vendor_company
        },
        "device": {
            "revision": get_branch_of_local_repo(device_company_path) or 'master',
            "repoAddress": get_remote_url_of_local_repo(device_company_path),
            "path": device_company
        },
        "extendProjects": [],
        "xmlPath": get_profile_xml_path(project),
        "existRepos": check_exist_repos(vendor_company_path,device_company_path)
    }


def serialized_project_data(project_el, remotes_data: dict, remote: str):
    return dict(
        revision=project_el.attrib.get("revision"),
        repoAddress='/'.join([remotes_data.get(remote), project_el.attrib.get("name") + '.git']),
        path=project_el.attrib.get("path")
    )


def get_primary_repo_url_and_sub_repo_name(url: str):
    items = url.rstrip('.git').split('/')
    return '/'.join(items[:-1]), items[-1]


def print_clone_result(successes: List[str], failed: List[str]):
    if successes:
        click.secho("Success List:")
        for item in successes:
            click.secho(item, fg="green")
    click.echo("")
    if failed:
        click.secho("Failure List:")
        for item in failed:
            click.secho(item, fg="red")
            PlatformioCloneCodeError(item)


def manifest_to_form(manifest):
    form = {
        'devicePath': manifest.get('device', {}).get('path'),
        'deviceRepoAddress': manifest.get('device', {}).get('repoAddress'),
        'deviceRevision': manifest.get('device', {}).get('revision'),
        'vendorPath': manifest.get('vendor', {}).get('path'),
        'vendorRepoAddress': manifest.get('vendor', {}).get('repoAddress'),
        'vendorRevision': manifest.get('vendor', {}).get('revision'),
        'extendProjects': []
    }
    return form
