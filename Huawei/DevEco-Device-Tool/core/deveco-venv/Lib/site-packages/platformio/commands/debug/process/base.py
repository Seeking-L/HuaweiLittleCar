# Copyright (c) 2014-present PlatformIO <contact@platformio.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import platformio.compat
import platformio.proc
import platformio.fs
import platformio.project.helpers
# noinspection PyPackageRequirements
import click


class BaseProcess:
    def __init__(self, project_dir, env, variables):
        self.project_dir = project_dir
        self.env = env
        self.cache_dir = os.path.join(project_dir, '.deveco', '.debug-cache', self.env)
        os.makedirs(self.cache_dir, exist_ok=True)

        self.__variables = {
            "PLATFORMIO_HOME_DIR": platformio.project.helpers.get_project_core_dir(),
            "PLATFORMIO_CORE_DIR": platformio.project.helpers.get_project_core_dir(),
            "PYTHONEXE": platformio.proc.get_pythonexe_path()
        }
        self.__variables.update(variables)

    def run(self):
        raise NotImplementedError()

    @staticmethod
    def echo(line, fg=None):
        click.secho(line, fg=fg)

    def apply_variables(self, source, variables=None):
        _variables = self.__variables.copy()
        _variables.update(variables or {})

        for key, value in _variables.items():
            if key.endswith(("_DIR", "_PATH")):
                _variables[key] = platformio.fs.to_unix_path(value)

        def _replace(text):
            for k, v in _variables.items():
                pattern = "$%s" % k
                text = text.replace(pattern, v or "")
            return text

        if isinstance(source, platformio.compat.string_types):
            source = _replace(source)
        elif isinstance(source, (list, dict)):
            items = enumerate(source) if isinstance(source, list) else source.items()
            for key, value in items:
                if isinstance(value, platformio.compat.string_types):
                    source[key] = _replace(value)
                elif isinstance(value, (list, dict)):
                    source[key] = self.apply_variables(value, variables)

        return source
