import sqlite3
from os.path import isfile
import json


DATA_TYPE = {
    'Timeline': 0,
    'TraceLiteEvent': 1,
    'CpuUsage': 2,
    'MemoryUsage': 3,
    'TaskList': 4,
    'CpuId': 5,
    'MemPool': 6
}


class TraceDatabaseManager():
    def __init__(self):
        self.database = None
        self.database_cursor = None

    def reset_database(self, db_path):
        if not db_path or not isfile(db_path):
            raise Exception("database path is not exist")
        try:
            self.database = sqlite3.connect(db_path)
            self.database_cursor = self.database.cursor()
        except Exception as e:
            raise Exception('connect database failed') from e

    def close_database(self):
        if self.database is not None:
            try:
                self.database.close()
                self.database = None
            except Exception as e:
                raise Exception('close datavase failed') from e

    def get_data_by_index(self, table_name, start_index, end_index, condition=None):
        if start_index == 0 and end_index == 0:
            data_count = self.get_table_size(table_name, condition)
            end_index = data_count.get("count")

        if condition:
            count = end_index - start_index
            sql = f'select * from {table_name} where {condition.get("cond", "")} limit ?,?'
            parames = condition.get("parames", [])
            parameters = parames + [start_index, count]
            return self.get_data_from_table(sql, parameters, table_name, True)

        sql = f'select * from {table_name} where rowid > ? and rowid <= ?'
        parameters = [start_index, end_index]
        return self.get_data_from_table(sql, parameters, table_name)

    def get_data_by_time(self, table_name, start_time, end_time, condition=None):
        if end_time < 0:
            sql = f'select * from {table_name} where timestamp > ?'
            parameters = [start_time]
        else:
            sql = f'select * from {table_name} where timestamp > ? and timestamp <= ?'
            parameters = [start_time, end_time]
        if condition:
            sql = f'{sql} and {condition.get("cond", "")}'
            parameters.extend(condition.get("parames", []))
        return self.get_data_from_table(sql, parameters, table_name)

    def get_data_from_table(self, sql, parameters, table_name, condition=False):
        ret = {
            'type': DATA_TYPE[table_name],
            'start_time': 0,
            'end_time': 0,
            'items': []
        }
        if self.database is None:
            raise Exception("database is not opened!")
        self.database_cursor.execute(sql, parameters)
        row = self.database_cursor.fetchall()
        if row:
            for r in row:
                ret["items"].append(json.loads(r[-1]))
            if not condition and 'timestamp' in ret['items'][0] and 'timestamp' in ret['items'][-1]:
                ret["start_time"] = ret['items'][0]['timestamp']
                ret["end_time"] = ret['items'][-1]['timestamp']
        return ret

    def get_current_row_no(self, table_name, now_time):
        sql = f'select count(*) as rowid from {table_name} where timestamp < ?'
        parames = [now_time]
        if self.database is None:
            raise Exception("database is not opened!")
        self.database_cursor.execute(sql, parames)
        res_list = self.database_cursor.fetchall()
        res = {}
        for idx, v in enumerate(self.database_cursor.description):
            res[v[0]] = res_list[0][idx]
        rowid = res['rowid'] if res.get('rowid') is not None else 0
        if table_name == 'Timeline':
            if rowid > 1:
                rowid = rowid - 1
            time_stamp = str(now_time)
            ret = self.get_data_by_index(table_name, rowid, rowid + 1)
            if len(ret['items']) > 0:
                time_stamp = ret['items'][0].get('timestamp')
            return {
                'rowid': rowid,
                'timeStamp': time_stamp
            }
        return {'rowid': rowid}

    def get_table_size(self, table_name, condition=None):
        sql = 'SELECT MIN(rowid) as min_row, MAX(rowid) as max_row, MAX(timestamp) as max_timestamp,' \
            f'MIN(timestamp) as min_timestamp,COUNT(*) as count FROM {table_name}'
        if not self.database:
            raise Exception("database is not opened!")
        if condition:
            sql = f'{sql} where {condition.get("cond", "")}'
            parames = condition.get("parames", [])
            self.database_cursor.execute(sql, parames)
        else:
            self.database_cursor.execute(sql)
        res_list = self.database_cursor.fetchall()
        res = {}
        for idx, v in enumerate(self.database_cursor.description):
            res[v[0]] = res_list[0][idx]
        return res
