"""
generate settings json file
"""
import json
import os
import sys
import click
from platformio.commands.exception import UnknownError

SUCCESS_CODE = 0
ERROR_CODE = 1


@click.command('generate', short_help='Generate settings json file')
def cli():
    try:
        dev_eco_config_dir = get_dev_eco_config_dir()
        if not os.path.exists(dev_eco_config_dir) or not os.path.isdir(dev_eco_config_dir):
            os.makedirs(dev_eco_config_dir)

        setting_file_path = os.path.join(dev_eco_config_dir, 'settings.json')
        if os.path.exists(setting_file_path) and os.path.isfile(setting_file_path):
            click.echo('%s is already exists, the file will be overwritten' % setting_file_path)

        installation_path = get_installation_path()
        data = {'path': installation_path}

        flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
        with os.fdopen(os.open(setting_file_path, flags, 0o640), 'w') as setting_file:
            json.dump(data, setting_file)

        click.echo(json.dumps(
            {'code': SUCCESS_CODE, 'msg': '%s is set to %s' % (installation_path, setting_file_path)}
        ))
    except Exception as e:
        click.echo(json.dumps({'code': ERROR_CODE, 'err': 'failed to generate settings json'}))
        raise UnknownError(e)


def get_installation_path():
    # The hos command is called in virtual environment, the executable python
    # is on the virtual environment directory, thus the deveco
    # installation is relative to '../../../../'
    return os.path.normpath(os.path.join(sys.executable, '..', '..', '..', '..'))


def get_dev_eco_config_dir():
    return os.path.join(os.path.expanduser('~'), '.deveco-device-tool')
