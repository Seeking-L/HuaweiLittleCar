#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
Description: hdf adapt module
Create: 2021-5-31
"""
import os
import subprocess
import shutil
import json
import re
from enum import Enum


class HdfPathVersion(Enum):
    VERSION_INVALID = 0
    VERSION_1 = 1
    VERSION_2 = 2


class Hdf:
    def __exec(self, cmd, **kwargs):
        # returns a tuple: (bool, str)
        if not os.path.isfile(self.__server_path):
            return False, 'HDF scripts do not exist in the project'
        cmds = [shutil.which('python')] + [self.__server_path] + cmd
        default = dict(stdin=subprocess.PIPE,
                       stdout=self.__stdout,
                       stderr=self.__stderr,
                       shell=False,
                       cwd=os.path.dirname(self.__server_path)
                       )

        default.update(kwargs)
        kwargs = default
        try:
            p = subprocess.Popen(cmds, **kwargs)
            out, err = p.communicate(timeout=10)
            if isinstance(out, bytes):
                out = out.decode()
            if isinstance(err, bytes):
                err = err.decode()
        except subprocess.TimeoutExpired:
            p.kill()
            return False, 'HDF scripts response timed out'
        except FileNotFoundError:
            return False, 'HDF scripts do not exist in the project'
        except json.decoder.JSONDecodeError:
            return False, ''
        except:  # pylint: disable=bare-except
            print('Unhandled errors of HDF scripts')
            return False, ''
        return True, out

    def __init__(self, root_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE):  # pylint: disable=unused-argument
        self.__root_path = root_path
        self.__server_path = ''
        self.__path_version = HdfPathVersion.VERSION_INVALID
        server_path_1 = os.path.join(
            root_path, 'drivers', 'framework', 'tools', 'hdf_dev_eco_tool', 'main.py'
        )
        server_path_2 = os.path.join(
            root_path, 'drivers', 'hdf_core', 'framework', 'tools', 'hdf_dev_eco_tool', 'main.py'
        )
        if os.path.isfile(server_path_1):
            self.__server_path = server_path_1
            self.__path_version = HdfPathVersion.VERSION_1
        elif os.path.isfile(server_path_2):
            self.__server_path = server_path_2
            self.__path_version = HdfPathVersion.VERSION_2

        self.__stdout = subprocess.PIPE
        self.__stderr = subprocess.PIPE

    def __del__(self):
        if hasattr(self.__stdout, 'close') and callable(self.__stdout.close):
            self.__stdout.close()
        if hasattr(self.__stderr, 'close') and callable(self.__stderr.close):
            self.__stderr.close()

    @property
    def server_path(self):
        return self.__server_path

    @property
    def server_path_version(self):
        return self.__path_version

    def add_general_driver(self, driver_info):
        cmds = [
            'add', '--action_type', 'module',
            '--root_dir', self.__root_path,
            '--vendor_name', driver_info.vendor_name,
            '--board_name', driver_info.board_name,
            '--kernel_name', "liteos" if driver_info.kernel_name.startswith("liteos") else driver_info.kernel_name,
            '--module_name', driver_info.module_name,
            '--driver_name', driver_info.driver_name,
        ]
        if driver_info.runmode in ("user", "kernel"):
            cmds.extend(['--runmode', driver_info.runmode])
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def delete_module(self, module_name):
        cmds = [
            'delete', '--action_type', 'module',
            '--root_dir', self.__root_path,
            '--module_name', module_name
        ]
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def get_general_driver_list(self):
        cmds = [
            'get', '--action_type', 'model_list',
            '--root_dir', self.__root_path
        ]
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def add_domain_driver(self, driver_info):
        cmds = [
            'add', '--action_type', 'driver',
            '--root_dir', self.__root_path,
            '--vendor_name', driver_info.vendor_name,
            '--board_name', driver_info.board_name,
            '--kernel_name', "liteos" if driver_info.kernel_name.startswith("liteos") else driver_info.kernel_name,
            '--module_name', driver_info.module_name,
            '--device_name', driver_info.device_name,
            '--driver_name', driver_info.driver_name,
        ]
        if driver_info.runmode in ("user", "kernel"):
            cmds.extend(['--runmode', driver_info.runmode])
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def delete_domain_driver(self, **kwargs):
        cmds = [
            'delete', '--action_type', 'module_driver',
            '--root_dir', self.__root_path,
            '--board_name', kwargs.get('board_name'),
            '--kernel_name', "liteos" if kwargs.get('kernel_name').startswith("liteos") else kwargs.get('kernel_name'),
            '--module_name', kwargs.get('module_name'),
            '--device_name', kwargs.get('device_name'),
            '--driver_name', kwargs.get('driver_name'),
        ]
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def get_domain_driver_list(self, module_name):
        cmds = [
            'get', '--action_type', 'model_driver_list',
            '--root_dir', self.__root_path,
            '--module_name', module_name
        ]
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def get_model_device_list(self, module_name):
        cmds = [
            'get', '--action_type', 'model_device_list',
            '--root_dir', self.__root_path,
            '--module_name', module_name
        ]
        success, body = self.__exec(cmds)
        if not success:
            raise RuntimeError(body)
        return body

    def get_version(self):
        cmds = ['get', '--action_type', 'version']
        success, info = self.__exec(cmds)
        if not success:
            raise RuntimeError(info)

        pattern = r'hdf_dev_eco_tool version : (.*)'
        version_list = re.findall(pattern, info)
        if version_list:
            return version_list[0].strip()
        else:
            raise RuntimeError('Invalid version')
