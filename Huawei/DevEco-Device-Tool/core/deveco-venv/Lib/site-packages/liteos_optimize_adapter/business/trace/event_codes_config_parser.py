#!/user/bin/env python3
#coding=utf-8
from enum import Enum
from liteos_optimize_adapter.business.trace.events_config import EventsConfig


class LOS_TRACE_MASK(Enum):
    TRACE_SYS_FLAG = 0x10
    TRACE_HWI_FLAG = 0x20
    TRACE_TASK_FLAG = 0x40
    TRACE_SWTMR_FLAG = 0x80
    TRACE_MEM_FLAG = 0x100
    TRACE_QUE_FLAG = 0x200
    TRACE_EVENT_FLAG = 0x400
    TRACE_SEM_FLAG = 0x800
    TRACE_MUX_FLAG = 0x1000
    TRACE_MAX_FLAG = 0x80000000
    TRACE_USER_DEFAULT_FLAG = 0xFFFFFFF0


class LOS_TRACE_TYPE(Enum):
    # 0x10~0x1F
    TRACE_SYS_ERROR = LOS_TRACE_MASK.TRACE_SYS_FLAG.value | 0
    TRACE_SYS_START = LOS_TRACE_MASK.TRACE_SYS_FLAG.value | 1
    TRACE_SYS_STOP = LOS_TRACE_MASK.TRACE_SYS_FLAG.value | 2
    # 0x20~0x2F
    TRACE_HWI_CREATE = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 0
    TRACE_HWI_CREATE_SHARE = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 1
    TRACE_HWI_DELETE = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 2
    TRACE_HWI_DELETE_SHARE = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 3
    TRACE_HWI_RESPONSE_IN = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 4
    TRACE_HWI_RESPONSE_OUT = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 5
    TRACE_HWI_ENABLE = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 6
    TRACE_HWI_DISABLE = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 7
    TRACE_HWI_TRIGGER = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 8
    TRACE_HWI_SETPRI = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 9
    TRACE_HWI_CLEAR = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 10
    TRACE_HWI_SETAFFINITY = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 11
    TRACE_HWI_SENDIPI = LOS_TRACE_MASK.TRACE_HWI_FLAG.value | 12
    # 0x40~0x4F
    TRACE_TASK_CREATE = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 0
    TRACE_TASK_PRIOSET = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 1
    TRACE_TASK_DELETE = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 2
    TRACE_TASK_SUSPEND = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 3
    TRACE_TASK_RESUME = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 4
    TRACE_TASK_SWITCH = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 5
    TRACE_TASK_SIGNAL = LOS_TRACE_MASK.TRACE_TASK_FLAG.value | 6
    # 0x80~0x8F
    TRACE_SWTMR_CREATE = LOS_TRACE_MASK.TRACE_SWTMR_FLAG.value | 0
    TRACE_SWTMR_DELETE = LOS_TRACE_MASK.TRACE_SWTMR_FLAG.value | 1
    TRACE_SWTMR_START = LOS_TRACE_MASK.TRACE_SWTMR_FLAG.value | 2
    TRACE_SWTMR_STOP = LOS_TRACE_MASK.TRACE_SWTMR_FLAG.value | 3
    TRACE_SWTMR_EXPIRED = LOS_TRACE_MASK.TRACE_SWTMR_FLAG.value | 4
    TRACE_SWTMR_FUNCIN = LOS_TRACE_MASK.TRACE_SWTMR_FLAG.value | 5
    # 0x100~0x10F
    TRACE_MEM_ALLOC = LOS_TRACE_MASK.TRACE_MEM_FLAG.value | 0
    TRACE_MEM_ALLOC_ALIGN = LOS_TRACE_MASK.TRACE_MEM_FLAG.value | 1
    TRACE_MEM_REALLOC = LOS_TRACE_MASK.TRACE_MEM_FLAG.value | 2
    TRACE_MEM_FREE = LOS_TRACE_MASK.TRACE_MEM_FLAG.value | 3
    TRACE_MEM_INFO_REQ = LOS_TRACE_MASK.TRACE_MEM_FLAG.value | 4
    TRACE_MEM_INFO = LOS_TRACE_MASK.TRACE_MEM_FLAG.value | 5
    # 0x200~0x20F
    TRACE_QUEUE_CREATE = LOS_TRACE_MASK.TRACE_QUE_FLAG.value | 0
    TRACE_QUEUE_DELETE = LOS_TRACE_MASK.TRACE_QUE_FLAG.value | 1
    TRACE_QUEUE_RW = LOS_TRACE_MASK.TRACE_QUE_FLAG.value | 2
    # 0x400~0x40F
    TRACE_EVENT_CREATE = LOS_TRACE_MASK.TRACE_EVENT_FLAG.value | 0
    TRACE_EVENT_DELETE = LOS_TRACE_MASK.TRACE_EVENT_FLAG.value | 1
    TRACE_EVENT_READ = LOS_TRACE_MASK.TRACE_EVENT_FLAG.value | 2
    TRACE_EVENT_WRITE = LOS_TRACE_MASK.TRACE_EVENT_FLAG.value | 3
    TRACE_EVENT_CLEAR = LOS_TRACE_MASK.TRACE_EVENT_FLAG.value | 4
    # 0x800~0x80F
    TRACE_SEM_CREATE = LOS_TRACE_MASK.TRACE_SEM_FLAG.value | 0
    TRACE_SEM_DELETE = LOS_TRACE_MASK.TRACE_SEM_FLAG.value | 1
    TRACE_SEM_PEND = LOS_TRACE_MASK.TRACE_SEM_FLAG.value | 2
    TRACE_SEM_POST = LOS_TRACE_MASK.TRACE_SEM_FLAG.value | 3
    # 0x1000~0x100F
    TRACE_MUX_CREATE = LOS_TRACE_MASK.TRACE_MUX_FLAG.value | 0
    TRACE_MUX_DELETE = LOS_TRACE_MASK.TRACE_MUX_FLAG.value | 1
    TRACE_MUX_PEND = LOS_TRACE_MASK.TRACE_MUX_FLAG.value | 2
    TRACE_MUX_POST = LOS_TRACE_MASK.TRACE_MUX_FLAG.value | 3


class EventCodesConfigParser():

    def __init__(self):
        self.trace_code_dict = {}
        self.event_code_dict = {}

    def init_trace_code(self):
        # init trace_code_dict
        for item in LOS_TRACE_TYPE:
            self.trace_code_dict[hex(item.value)] = item.name
        self.parse_codes()

    def parse_codes(self):
        # init event_code_dict
        event_group = EventsConfig.events_config.get('Events', {}).get('EventGroup', [])
        for group_element in event_group:
            for event_element in group_element.get('Event', []):
                code_name = event_element.get('code', '')
                if code_name:
                    self.event_code_dict[code_name] = event_element

    def get_by_event_code(self, event_code):
        code = self.trace_code_dict.get(event_code)
        if code is None:
            code = event_code
        return self.event_code_dict.get(code)
