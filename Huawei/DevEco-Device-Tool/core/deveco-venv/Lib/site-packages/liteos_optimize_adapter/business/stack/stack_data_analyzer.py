#!/usr/bin/env python3
# coding=utf-8

import os
from os.path import join, isdir, abspath, exists

import click

from liteos_optimize_adapter.business.stack.stack_handle_data import StackHandleData
from liteos_optimize_adapter.business.stack.stackusage import stackusage
from liteos_optimize_adapter.util.common_utils import CommonUtils


class StackDataAnalyzer:
    _elf_path = ''
    _asm_path = ''
    _stack_usage_path = ''
    _compiler_path = ''
    _prefix = 'arm-none-eabi'
    _addr2line_exe_path = ''
    _obj_dump_path = ''
    _environment = ''
    _stack_mode = ''
    _stack_rec_stats = ''

    def __init__(self):
        self._root_dir = join(abspath('.'), 'analyzerJson')
        if not isdir(self._root_dir):
            os.mkdir(self._root_dir)
        self._json_path = join(self._root_dir, 'funcstack.json')

    def do_stack_analysis(self, paths, confs):
        try:
            click.echo(f'++++++++start stackAnalyzer++++++++')
            data = CommonUtils.get_prefix(paths['compiler_path'])
            paths.update(data)
            click.echo(paths)
            if paths['elf_path']:
                self._elf_path = paths['elf_path']
            if paths['compiler_path']:
                self._compiler_path = paths['compiler_path'] 
            if paths['asm_path']:
                self._asm_path = paths['asm_path']

            click.echo(confs)
            if confs['stack_mode']:
                self._stack_mode = confs['stack_mode']
            if confs['stack_rec_stats']:
                self._stack_rec_stats = confs['stack_rec_stats']

            self._prefix = paths['prefix']
            self._environment = paths['environment']

            addr2line_suffix = self._prefix + '-addr2line.exe'
            obj_dump_suffix = self._prefix + '-objdump.exe'
            if self._environment == 'linux':
                addr2line_suffix = self._prefix + '-addr2line'
                obj_dump_suffix = self._prefix + '-objdump'

            self._addr2line_exe_path = join(self._compiler_path, addr2line_suffix)
            self._obj_dump_path = join(self._compiler_path, obj_dump_suffix)

            if self._asm_path == '':
                self._asm_path = join(self._root_dir, 'assembleFile.asm')
                self._elf_to_asm()

            self._do_stack_usage()
            StackHandleData(self._json_path, self._addr2line_exe_path, self._elf_path)
            click.echo(f'++++++++end stackAnalyzer++++++++')
        except Exception as e:
            raise Exception('stackAnalyzer error') from e

    def _do_stack_usage(self):
        try:
            args = [self._asm_path, '-j']
            if self._stack_mode:
                args.extend(['-m', self._stack_mode])
            if self._stack_rec_stats:
                args.extend(['-r', self._stack_rec_stats])
            stackusage.main(args)
        except Exception as e:
            click.echo('Data parsing error')
            raise Exception() from e

    def _elf_to_asm(self):
        if not exists(self._elf_path):
            click.echo(f'elf path not find: {self._elf_path}')
            raise FileExistsError()
        if not exists(self._obj_dump_path):
            click.echo(f'objdump path not find: {self._obj_dump_path}')
            raise FileExistsError()
        data = []
        try:
            dump_options = '-d'
            if self._stack_mode and int(self._stack_mode) > 0:
                dump_options = '-Sld'
            data = CommonUtils.get_obj_dump_info(self._obj_dump_path, dump_options, self._elf_path, False)
        except SystemError as e:
            click.echo('elf to asm error')
            raise SystemError() from e
        if len(data) > 0:
            flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
            with os.fdopen(os.open(self._asm_path, flags, 0o640), 'w') as fp:
                fp.write(data[0])
        else:
            click.echo('generate the asm file failed, Ensure that compiler matches elf.')
            raise Exception()
