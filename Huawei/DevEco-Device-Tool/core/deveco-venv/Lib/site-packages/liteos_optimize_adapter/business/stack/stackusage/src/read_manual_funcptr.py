import os
from liteos_optimize_adapter.business.stack.stackusage.src.func_stack import FuncStack


def read_manual_func_ptr_cfg(filename):
    with open(filename, "r") as func_ptr_cfg_file:
        fun_ptr_lines = func_ptr_cfg_file.readlines()

    flags = os.O_RDWR | os.O_CREAT | os.O_TRUNC
    with os.fdopen(os.open(filename, flags, 0o640), 'w') as fp:
        for fun_ptr_line in fun_ptr_lines:
            strs = fun_ptr_line.split()
            length = len(strs)
            if length < 3:
                continue
            tag = strs[0]
            caller_addr = strs[1]
            callee_func_list = strs[3:]
            if tag == "Remarks_here:" and len(callee_func_list) == 0:
                continue
            if tag == "Remarks_here:" and caller_addr not in FuncStack.addr_funcstack_dict:
                continue
            if tag == "Remarks_here:":
                fp.write(fun_ptr_line)
                FuncStack.addr_funcstack_dict[caller_addr].ptr_src_location = []
                set_remarks_here(caller_addr, callee_func_list)


def set_remarks_here(caller_addr, callee_func_list):
    if callee_func_list[0] == "NULL" or callee_func_list[0] == "null":
        return
    for func_name in callee_func_list:
        callee_addr_list = FuncStack.find_funcstack_by_name(func_name)
        for callee_addr in callee_addr_list:
            FuncStack.add_callee_func_addr_by_addr(caller_addr, callee_addr)
