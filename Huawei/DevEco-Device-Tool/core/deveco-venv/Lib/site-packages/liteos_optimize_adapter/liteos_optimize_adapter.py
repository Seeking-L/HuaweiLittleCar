import click

from liteos_optimize_adapter.business.stack.stack_data_analyzer import StackDataAnalyzer
from liteos_optimize_adapter.business.build.build_data_analyzer import BuildDataAnalyzer
from liteos_optimize_adapter.business.perf.perf_data_analyzer import PerfDataAnalyzer
from liteos_optimize_adapter.business.trace.trace_database_service import TraceDatabaseService
from liteos_optimize_adapter.business.trace.serial_terminal_backend import SerialTerminalBackend


class AnalyzerOptimize:
    def __init__(self,
                elf_path,
                compiler_path,
                asm_path=None,
                map_path=None,
                perf_path=None,
                rootfs_path=None,
                stack_mode=None,
                stack_rec_stats=None):
        self.__elf_path = elf_path
        self.__compiler_path = compiler_path
        self.__asm_path = asm_path
        self.__map_path = map_path
        self.__perf_path = perf_path
        self.__rootfs_path = rootfs_path
        self.__stack_mode = stack_mode
        self.__stack_rec_stats = stack_rec_stats

    def _stack(self):
        result = 0
        try:
            stack_paths = {
                'elf_path': self.__elf_path,
                'compiler_path': self.__compiler_path,
                'asm_path': self.__asm_path,
            }
            stack_confs = {
                'stack_mode': self.__stack_mode,
                'stack_rec_stats': self.__stack_rec_stats,
            }
            StackDataAnalyzer().do_stack_analysis(stack_paths, stack_confs)
        except Exception as e:
            result = -1
            click.echo("Failed to stack analyzer.")

        return result

    def _build(self):
        result = 0
        try:
            build_paths = {
                'elf_path': self.__elf_path,
                'map_path': self.__map_path,
                'compiler_path': self.__compiler_path,
            }
            BuildDataAnalyzer().do_build_analysis(build_paths)
        except Exception as e:
            result = -1
            click.echo("Failed to build analyzer.")

        return result

    def _perf(self):
        result = 0
        try:
            perf_paths = {
                'elf_path': self.__elf_path,
                'perf_path': self.__perf_path,
                'compiler_path': self.__compiler_path,
                'rootfs_path': self.__rootfs_path
            }
            PerfDataAnalyzer().do_perf_analysis(perf_paths)
        except Exception as e:
            result = -1
            click.echo("Failed to perf analyzer.")

        return result

    def analysis(self, action):
        handlers = {
            "stack": self._stack,
            "build": self._build,
            "perf": self._perf
        }
        return handlers[action]()


class TraceOptimize:
    def __init__(self):
        self.database_service = TraceDatabaseService()
        self.serial_backend = SerialTerminalBackend()

    def _init_database(self, db_path=None):
        try:
            self.database_service.reset_database(db_path)
            self.serial_backend.init_config(self.database_service.database_path)
        except Exception as e:
            click.echo("Failed to initialize the database.")
            raise Exception() from e
        finally:
            self.database_service.close_database()

    def start(self, port, baud, data_path=None):
        try:
            self._init_database(data_path)
            port_setting = {"port": port, "baud_rate":baud, "data_bit":8,
                        "stop_bit":1, "partity":"none", "flow_control":"none"}
            self.serial_backend.get_trace_data(port_setting)
        except Exception as e:
            raise Exception("Failed to get the trace data.") from e

    def stop(self, port, baud):
        try:
            port_setting = {"port": port, "baud_rate":baud, "data_bit":8,
                        "stop_bit":1, "partity":"none", "flow_control":"none"}
            self.serial_backend.stop_trace(port_setting)
        except Exception as e:
            raise Exception("Failed to trace stop.") from e
