const fs = require("fs");
const path = require('path');
var bundleJson = require("../bundle.json");

module.exports = (hpmApi) => {
  registI18nResource(hpmApi);
  hpmApi.registerCmd(
    'dependencies',
    {
      description: hpmApi.i18n.getMessage(`${bundleJson.name}.description`)
    },
    async () => {
      await writeDataTree(hpmApi);
    }, true);
}

async function writeDataTree(hpmApi, { silent } = {}) {
  const data = await buildDataTree(hpmApi, silent);
  const outputDir = hpmApi.getOutputDir(bundleJson.name);
  hpmApi.shelljs.cp('-r', path.resolve(__dirname, '..', 'ui'), outputDir);
  fs.writeFileSync(path.join(outputDir, "ui", 'data.json'), JSON.stringify(data, null, 4));
}
async function buildDataTree(hpmApi, silent) {
  const nodes = [];
  const links = [];
  const manifestGraph = await hpmApi.list(true);
  for (const manifest of manifestGraph) {
    const subList = await hpmApi.getDependencies(manifest.name, manifestGraph);
    for (const item of subList) {
      links.push({
        source: manifest.name,
        target: item.name,
        value: 1,
      });
    }
    nodes.push({
      name: manifest.name,
      version: manifest.version.version,
      publishAs: manifest.publishAs,
      isOptional: false
      // isOptional: optionalDeps.includes(manifest.name),
    });
  }
  if (!silent) {
    console.log('nodes', nodes);
    console.log('links', links);
  }
  return { nodes, links };
}

function registI18nResource(hpmApi) {
  const en = {
    "description": "Generate views based on project dependencies"
  };
  const zh = {
    "description": "根据项目依赖生成关系视图"
  }

  hpmApi.i18n.addLocalization("en", en, { pluginName: bundleJson.name });
  hpmApi.i18n.addLocalization("zh", zh, { pluginName: bundleJson.name });
}