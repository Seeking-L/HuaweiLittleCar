"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('../utils/constant'),
    SocketType = _require.SocketType;

var WsStart = require('./ws-start');

var Message = require('../model/message');

var WsHandler = /*#__PURE__*/_createClass(function WsHandler(_messageString, ws, parent) {
  var _this = this;

  _classCallCheck(this, WsHandler);

  _defineProperty(this, "receiveMessage", function (messageString) {
    _this.message = new Message(JSON.parse(messageString));
    _this.wsContext.id = _this.message.id;

    if (_this.message.isStart()) {
      return _this.start();
    }

    if (_this.message.isStop()) {
      _this.parent.handlers[_this.message.id] = undefined;
      return _this.stop();
    }

    if (_this.message.isChecked()) {
      _this.checked();
    }
  });

  _defineProperty(this, "start", function () {
    var payload = _this.message.payload;
    var start = new WsStart({
      payload: payload
    }, _this.wsContext);
    start.then(function (data) {
      if (data) {
        _this.send(data);

        _this.done();
      }
    }).catch(function (err) {
      _this.error(err);
    }); // starthandler({ id, payload }, this);// 根据浏览器传进来的id和payload 去处理
  });

  _defineProperty(this, "checked", function () {
    var id = _this.message.id;
    var res = {
      id: id,
      type: SocketType.CHECKED,
      data: 'OK'
    };

    _this.ws.send(JSON.stringify(res));
  });

  _defineProperty(this, "stop", function () {// const { id, payload } = this.message;
    // stophandler({ id, payload }, this);// 根据浏览器传进来的id 和payload 去释放资源
  });

  _defineProperty(this, "send", function (data) {
    var id = _this.message.id;
    var res = {
      id: id,
      type: SocketType.DATA,
      data: data
    };

    _this.ws.send(JSON.stringify(res));
  });

  _defineProperty(this, "done", function () {
    var id = _this.message.id;
    var res = {
      id: id,
      type: SocketType.DONE
    };

    _this.ws.send(JSON.stringify(res));
  });

  _defineProperty(this, "error", function (error) {
    var id = _this.message.id;
    var res = {
      id: id,
      type: SocketType.DONE,
      error: {
        message: error.message || error
      }
    };

    _this.ws.send(JSON.stringify(res));
  });

  try {
    this.message = {};
    this.ws = ws;
    this.parent = parent;
    this.wsContext = {
      id: '',
      send: this.send,
      done: this.done,
      error: this.error,
      registStop: function registStop(stop) {
        _this.stop = stop;
      }
    };
    this.receiveMessage(_messageString);
  } catch (error) {
    this.error(error);
  }
});

module.exports = WsHandler;