"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var path = require('path');

var _require = require('../utils/utils'),
    getGlobalItem = _require.getGlobalItem;

var appEvent = require('../event');

var HPM_API = getGlobalItem('api');

var PluginManager = /*#__PURE__*/function () {
  function PluginManager() {
    var _this = this;

    _classCallCheck(this, PluginManager);

    return this.getAllPlugins().then(function () {
      return _this;
    });
  }

  _createClass(PluginManager, [{
    key: "getAllPlugins",
    value: function getAllPlugins() {
      var _this2 = this;

      return new Promise(function (resolve) {
        var plugins = HPM_API.getPluginManifests();
        _this2.plugins = plugins.map(function (pluginManifest) {
          var manifestJson = pluginManifest.json();

          var plugin = _objectSpread(_objectSpread({}, manifestJson), {}, {
            localPath: pluginManifest.path
          });

          _this2.setPluginAsset(plugin);

          return plugin;
        });
        resolve(_this2.plugins);
      });
    }
  }, {
    key: "setPluginAsset",
    value: function setPluginAsset(plugin) {
      if (plugin.plugin && plugin.plugin.ui && plugin.plugin.ui.source) {
        var routePath = "/addon/".concat(plugin.name);
        var staticPath = path.join(plugin.localPath, plugin.plugin.ui.source);
        appEvent.emit('assetAdd', {
          routePath: routePath,
          staticPath: staticPath,
          id: plugin.name
        });
      }
    }
  }]);

  return PluginManager;
}();

PluginManager.addDisabledPlugin = function (name) {
  return HPM_API.addDisabledPlugin(name);
};

PluginManager.removeDisabledPlugin = function (name) {
  return HPM_API.removeDisabledPlugin(name);
};

PluginManager.getDisabledPlugins = function () {
  return HPM_API.getDisabledPlugins();
};

module.exports = PluginManager;