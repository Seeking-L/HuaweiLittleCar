"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WsHandler = require('./ws-handler');

var WebSocket = require('ws');

var Message = require('../model/message');

var _require = require('../utils/constant'),
    SocketType = _require.SocketType;

var Wss = /*#__PURE__*/_createClass(function Wss(server) {
  var _this = this;

  _classCallCheck(this, Wss);

  this.handlers = {};
  var wss = new WebSocket.Server({
    server: server
  });
  wss.on('connection', function (ws) {
    _this.handlers = {};
    ws.on('message', function (message) {
      try {
        var messageobj = new Message(JSON.parse(message));
        var wsHandler = _this.handlers[messageobj.id];

        if (wsHandler) {
          wsHandler.receiveMessage(message);
        } else {
          _this.handlers[messageobj.id] = new WsHandler(message, ws, _this); // eslint-disable-line
        }
      } catch (err) {
        console.log(err);
      }
    });
    ws.on('error', function () {
      return ws.removeAllListeners;
    });
    ws.on('close', function () {
      return ws.removeAllListeners;
    });
    ws.send(JSON.stringify({
      type: SocketType.CONNECTED
    }));
  });
});

module.exports = Wss;