"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var path = require('path');

var _require = require('../model/task'),
    TaskList = _require.TaskList;

var appEvent = require('../event');

var _require2 = require('../utils/utils'),
    readFile = _require2.readFile,
    getGlobalItem = _require2.getGlobalItem;

var HPM_API = getGlobalItem('api');

var Project = /*#__PURE__*/function () {
  function Project() {
    var _this = this;

    _classCallCheck(this, Project);

    this.getBundleJSON().then(function (bundleJson) {
      var routePath = '/api/resource';
      var staticPath = path.join(_this.cwd, 'ohos_bundles', '.output');
      appEvent.emit('assetAdd', {
        routePath: routePath,
        staticPath: staticPath,
        id: 'output'
      });
      var routeCwd = '/api/cwd';
      var staticCwd = path.join(process.cwd());
      appEvent.emit('assetAdds', {
        routeCwd: routeCwd,
        staticCwd: staticCwd,
        id: 'cwd'
      });
      HPM_API.setRecentProject(bundleJson.name, _this.cwd);
    }).catch(function (_) {});
  }

  _createClass(Project, [{
    key: "cwd",
    get: function get() {
      return getGlobalItem('cwd');
    }
  }, {
    key: "getBundleJSON",
    value: function getBundleJSON() {
      return this.getTextFile('bundle.json').then(function (data) {
        return JSON.parse(data);
      });
    }
  }, {
    key: "getTextFile",
    value: function getTextFile(filename) {
      var fullPath = path.resolve(path.join(this.cwd, filename));
      return readFile(fullPath).then(function (data) {
        return data.toString();
      });
    }
  }, {
    key: "getTasks",
    value: function getTasks() {
      return this.getBundleJSON().then(function (json) {
        var taskList = new TaskList(json);
        return taskList.getTasks();
      });
    }
  }]);

  return Project;
}();

var project = new Project();
module.exports = project;