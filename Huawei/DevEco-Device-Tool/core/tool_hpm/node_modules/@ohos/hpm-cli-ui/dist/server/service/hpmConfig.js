"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var _require = require('../utils/utils.js'),
    getGlobalItem = _require.getGlobalItem;

var HPMConfig = /*#__PURE__*/function () {
  function HPMConfig() {
    _classCallCheck(this, HPMConfig);

    this.apiGetConfig = getGlobalItem('api').getConfig;
    this.apiDeleteConfig = getGlobalItem('api').deleteConfig;
    this.apiSetConfig = getGlobalItem('api').setConfig;
  }

  _createClass(HPMConfig, [{
    key: "setConfig",
    value: function setConfig(config) {
      this.apiSetConfig(config);
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      return this.apiGetConfig();
    }
  }, {
    key: "deleteConfig",
    value: function deleteConfig(configkeys) {
      this.apiDeleteConfig(configkeys);
    }
  }]);

  return HPMConfig;
}();

module.exports = HPMConfig;