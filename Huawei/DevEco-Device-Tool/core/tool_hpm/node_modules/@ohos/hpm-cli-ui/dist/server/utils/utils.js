"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var OS = require('os');

var fs = require('fs');

var path = require('path');

var _require = require('child_process'),
    spawn = _require.spawn;

function getUuid() {
  var s = [];
  var hexDigits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  for (var i = 0; i < 36; i++) {
    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
  }

  s[14] = '4';
  s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1);
  s[8] = s[13] = s[18] = s[23] = '-';
  var uuid = s.join('');
  return uuid;
}

function findKey(obj, value) {
  var compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {
    return a === b;
  };
  return _toConsumableArray(obj.keys()).find(function (k) {
    return compare(obj.get(k), value);
  });
} //  递归生成目录


var mkMoreDir = function mkMoreDir(pa, arr) {
  var curPath = path.resolve(pa, arr.shift());

  if (!fs.existsSync(curPath)) {
    fs.mkdirSync(curPath);
  }

  if (arr.length) {
    return mkMoreDir(curPath, arr);
  }

  return curPath;
};

var readFile = function readFile(filePath) {
  return new Promise(function (resolve, reject) {
    fs.readFile(filePath, function (err, data) {
      if (err) {
        reject(err);
      }

      resolve(data);
    });
  });
};

var writeFile = function writeFile(filePath, data) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(filePath, data, function (err, data) {
      if (err) {
        reject(err);
      }

      resolve(data);
    });
  });
};

var runCmd = function runCmd(cmd) {
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var cwd = arguments.length > 2 ? arguments[2] : undefined;
  var runner = new Promise(function (resolve, reject) {
    try {
      var child = spawn(cmd, _toConsumableArray(args), {
        shell: true,
        detached: false,
        cwd: cwd
      });
      resolve(child);
    } catch (err) {
      reject(err);
    }
  });
  return runner;
};

var openBrowser = function openBrowser(url) {
  var cmd = OS.platform() === 'win32' ? 'start' : 'open';
  return runCmd(cmd, [url]);
};
/**
  * Normalize a port into a number, string, or false.
  */


var normalizePort = function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

var setGlobalItem = function setGlobalItem(key, value) {
  if (!global.hpm) {
    global.hpm = {};
  }

  if (!['api', 'cwd'].includes(key)) {
    throw new Error('Not allowed global property!');
  }

  global.hpm[key] = value;
};

var getGlobalItem = function getGlobalItem(key) {
  if (global.hpm) {
    return global.hpm[key];
  }

  return null;
};

var printMessage = function printMessage(message) {
  console.log(message);
};

var taskStop = function taskStop(pid) {
  if (isWindows) {
    return new Promise(function (resolve, reject) {
      runCmd('taskKill', ['/T', '/F', '/PID', pid.toString()]).then(function (runProcess) {
        runProcess.on('exit', function (code) {
          if (code === 0) {
            resolve(0);
          } else {
            reject(new Error("unexpected code return ".concat(code)));
          }
        });
      });
    });
  } else {
    return new Promise(function (resolve, reject) {
      runCmd(path.resolve(__dirname, 'terminate.sh'), [pid.toString()]).then(function (runProcess) {
        runProcess.on('exit', function (code) {
          if (code === 0) {
            resolve(0);
          } else {
            reject(new Error("unexpected code return ".concat(code)));
          }
        });
      });
    });
  }
};

function getIPAdress() {
  var interfaces = require('os').networkInterfaces();

  for (var devName in interfaces) {
    var iface = interfaces[devName];

    for (var i = 0; i < iface.length; i++) {
      var alias = iface[i];

      if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
        return alias.address;
      }
    }
  }
}

function getFormattedDate(d, format) {
  var year = d.getFullYear();
  var month = d.getMonth() + 1;
  var date = d.getDate();
  var hour = d.getHours();
  var minute = d.getMinutes();
  var second = d.getSeconds();

  if (format === 'YYYY-MM-DD-hh-mm-ss') {
    return [year, month, date, hour, minute, second].map(function (m) {
      return String(m).padStart(2, '0');
    }).join('-');
  }

  if (format === 'YYYY-MM') {
    return "".concat(String(year), "-").concat(String(month).padStart(2, '0'));
  }

  if (format === 'YYYY-MM-DD') {
    return [year, month, date].map(function (m) {
      return String(m).padStart(2, '0');
    }).join('-');
  }

  return d.getTime();
}

function getFileSize(filePath, onReadFileSize) {
  if (!fs.existsSync(filePath)) {
    return 0;
  }

  ;
  var stat = fs.statSync(filePath);

  if (stat.isDirectory()) {
    var list = fs.readdirSync(filePath);
    return list.reduce(function (pre, file) {
      return pre + getFileSize(path.join(filePath, file), onReadFileSize);
    }, 0);
  } else {
    onReadFileSize(filePath, stat);
    return stat.size;
  }
}

var isWindows = OS.platform() === 'win32';
module.exports = {
  readFile: readFile,
  writeFile: writeFile,
  openBrowser: openBrowser,
  runCmd: runCmd,
  normalizePort: normalizePort,
  setGlobalItem: setGlobalItem,
  getGlobalItem: getGlobalItem,
  printMessage: printMessage,
  isWindows: isWindows,
  getFormattedDate: getFormattedDate,
  taskStop: taskStop,
  myHost: getIPAdress(),
  getFileSize: getFileSize,
  mkMoreDir: mkMoreDir,
  findKey: findKey,
  getUuid: getUuid
};