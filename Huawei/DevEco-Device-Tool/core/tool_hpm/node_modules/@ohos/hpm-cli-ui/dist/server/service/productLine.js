"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var fs = require('fs');

var os = require('os');

var ApiHandler = require('../utils/apiHandler');

var path = require('path');

var appEvent = require('../event');

var _require = require('../utils/utils'),
    getGlobalItem = _require.getGlobalItem,
    mkMoreDir = _require.mkMoreDir,
    writeFile = _require.writeFile,
    findKey = _require.findKey;

var _require2 = require('../utils/constant'),
    fileMap = _require2.fileMap;

var project = require('../service/project');

var HPM_API = getGlobalItem('api');

var ProductLine = /*#__PURE__*/function (_ApiHandler) {
  _inherits(ProductLine, _ApiHandler);

  var _super = _createSuper(ProductLine);

  function ProductLine() {
    var _this;

    _classCallCheck(this, ProductLine);

    _this = _super.call(this);
    _this.packageFolderPath = path.resolve(os.homedir(), '.hpm', 'dataPackages');
    setTimeout(function () {
      _this.assetDatapackages();
    }, 0);
    return _this;
  }

  _createClass(ProductLine, [{
    key: "cwd",
    get: function get() {
      return getGlobalItem('cwd');
    }
  }, {
    key: "applyProfileToBundle",
    value: function () {
      var _applyProfileToBundle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
        var bundleJson, productionLineId, productionVersion, bundleJsonPath, templateZip, oldBundleJson, data;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                bundleJson = _ref.bundleJson, productionLineId = _ref.productionLineId, productionVersion = _ref.productionVersion;
                bundleJsonPath = path.resolve(this.cwd, 'bundle.json'); // 判断当前目录是否存在bundle.json, 存在直接重写bundle.json,不存在根据模板生成bundle.json

                if (fs.existsSync(bundleJsonPath)) {
                  _context.next = 11;
                  break;
                }

                templateZip = path.resolve(this.packageFolderPath, productionLineId, productionVersion, 'template.zip');

                if (fs.existsSync(templateZip)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 7;
                return HPM_API.init({
                  name: bundleJson.name,
                  template: 'dist',
                  dirname: this.cwd
                });

              case 7:
                _context.next = 11;
                break;

              case 9:
                _context.next = 11;
                return HPM_API.compressing.zip.uncompress(templateZip, this.cwd);

              case 11:
                oldBundleJson = JSON.parse(fs.readFileSync(bundleJsonPath).toString());
                data = _objectSpread(_objectSpread({}, oldBundleJson), bundleJson);
                data.ohos && Object.keys(data.ohos).length === 0 && delete data.ohos;
                _context.next = 16;
                return writeFile(bundleJsonPath, JSON.stringify(data, null, 4));

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function applyProfileToBundle(_x) {
        return _applyProfileToBundle.apply(this, arguments);
      }

      return applyProfileToBundle;
    }()
  }, {
    key: "applyComponents",
    value: function () {
      var _applyComponents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(body, applyName) {
        var bundleJsonPath, data;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                bundleJsonPath = path.join(getGlobalItem('cwd'), 'bundle.json');

                if (fs.existsSync(bundleJsonPath)) {
                  _context2.next = 3;
                  break;
                }

                throw new Error("Can not found \"bundle.json\" in ".concat(__filename));

              case 3:
                _context2.next = 5;
                return project.getBundleJSON();

              case 5:
                data = _context2.sent;

                if (applyName) {
                  data[applyName] = body;
                }

                _context2.next = 9;
                return writeFile(bundleJsonPath, JSON.stringify(data, null, 4));

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function applyComponents(_x2, _x3) {
        return _applyComponents.apply(this, arguments);
      }

      return applyComponents;
    }()
  }, {
    key: "assetDatapackages",
    value: function assetDatapackages() {
      if (!fs.existsSync(this.packageFolderPath)) {
        fs.mkdirSync(this.packageFolderPath);
      }

      var routePath = '/api/datapackages';
      var staticPath = this.packageFolderPath;
      appEvent.emit('assetAdd', {
        routePath: routePath,
        staticPath: staticPath,
        id: 'datapackages'
      });
    }
  }, {
    key: "isCached",
    value: function isCached(productionLineId, productionVersion) {
      var packagePath = path.resolve(this.packageFolderPath, productionLineId, productionVersion);
      return fs.existsSync(packagePath) && fs.existsSync(path.resolve(packagePath, 'subsystem.json')) && fs.existsSync(path.resolve(packagePath, 'manifest.json')) && fs.existsSync(path.resolve(packagePath, 'logic.js'));
    }
  }, {
    key: "downloadPackage",
    value: function () {
      var _downloadPackage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref2) {
        var productionLineId, productionVersion, _yield$this$getFileUr, fileData, currentFileData, filePath, promiseArr, key;

        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                productionLineId = _ref2.productionLineId, productionVersion = _ref2.productionVersion;

                if (!fs.existsSync(this.packageFolderPath)) {
                  fs.mkdirSync(this.packageFolderPath);
                }

                if (this.isCached(productionLineId, productionVersion)) {
                  _context3.next = 12;
                  break;
                }

                _context3.next = 5;
                return this.getFileUrl({
                  productionLineId: productionLineId,
                  version: encodeURI(productionVersion)
                });

              case 5:
                _yield$this$getFileUr = _context3.sent;
                fileData = _yield$this$getFileUr.data;
                currentFileData = fileData.find(function (item) {
                  return item.productionLineId === productionLineId && item.productionVersion === productionVersion;
                });
                filePath = mkMoreDir(this.packageFolderPath, [productionLineId, productionVersion]);
                promiseArr = [];

                for (key in currentFileData.file) {
                  promiseArr.push(this.download(currentFileData.file[key], path.resolve(filePath, fileMap.get(key))));
                }

                return _context3.abrupt("return", Promise.all(promiseArr));

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function downloadPackage(_x4) {
        return _downloadPackage.apply(this, arguments);
      }

      return downloadPackage;
    }() //  获取本地数据包的信息，数据结构与远端相同

  }, {
    key: "getLocalProductLine",
    value: function getLocalProductLine() {
      var _this2 = this;

      var result = [];
      fs.readdirSync(this.packageFolderPath, {
        withFileTypes: true
      }).forEach(function (x) {
        if (x.isDirectory()) {
          fs.readdirSync(path.resolve(_this2.packageFolderPath, x.name), {
            withFileTypes: true
          }).forEach(function (y) {
            if (y.isDirectory()) {
              var filePath = path.resolve(_this2.packageFolderPath, x.name, y.name);
              var fileDir = fs.readdirSync(filePath);

              if (fs.existsSync(path.resolve(filePath, 'manifest.json'))) {
                var _JSON$parse = JSON.parse(fs.readFileSync(path.resolve(filePath, 'manifest.json')).toString()),
                    productionLineId = _JSON$parse.productionLineId,
                    productionVersion = _JSON$parse.version,
                    _JSON$parse$name = _JSON$parse.name,
                    enName = _JSON$parse$name.en,
                    name = _JSON$parse$name.zh,
                    _JSON$parse$descripti = _JSON$parse.description,
                    enDescription = _JSON$parse$descripti.en,
                    description = _JSON$parse$descripti.zh,
                    createTime = _JSON$parse.publishTime;

                var file = {};
                fileDir.forEach(function (item) {
                  file = _objectSpread(_objectSpread({}, file), {}, _defineProperty({}, findKey(fileMap, item), "/api/datapackages/".concat(x.name, "/").concat(y.name, "/").concat(item)));
                });
                var item = {
                  createTime: createTime,
                  description: description,
                  enDescription: enDescription,
                  enName: enName,
                  file: file,
                  name: name,
                  productionLineId: productionLineId,
                  productionVersion: productionVersion
                };
                result.push(item);
              }
            }
          });
        }
      });
      return result;
    }
  }]);

  return ProductLine;
}(ApiHandler);

module.exports = ProductLine;