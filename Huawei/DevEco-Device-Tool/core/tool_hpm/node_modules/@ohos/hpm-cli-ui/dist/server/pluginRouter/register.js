"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('../utils/utils'),
    getGlobalItem = _require.getGlobalItem;

var path = require('path');

var fs = require('fs');

var HPM_API = getGlobalItem('api');

var resolveRouterPlugins = function resolveRouterPlugins(serverApi) {
  var plugins = HPM_API.getPluginManifests().map(function (pluginManifest) {
    var manifestJson = pluginManifest.json();

    var plugin = _objectSpread(_objectSpread({}, manifestJson), {}, {
      localPath: pluginManifest.path
    });

    return plugin;
  });
  var disabledPlugins = HPM_API.getDisabledPlugins();
  plugins.filter(function (manifest) {
    return !disabledPlugins.includes(manifest.name);
  }).filter(function (manifest) {
    var _manifest$plugin, _manifest$plugin$ui;

    return manifest === null || manifest === void 0 ? void 0 : (_manifest$plugin = manifest.plugin) === null || _manifest$plugin === void 0 ? void 0 : (_manifest$plugin$ui = _manifest$plugin.ui) === null || _manifest$plugin$ui === void 0 ? void 0 : _manifest$plugin$ui.router;
  }).forEach(function (manifest) {
    requireEntry(manifest, manifest.localPath, serverApi);
  });
};

function requireEntry(manifest, projectPath, serverApi) {
  var entryFileName = manifest.plugin && manifest.plugin.ui.router;

  if (entryFileName) {
    var entryFilePath = path.resolve(path.join(projectPath, entryFileName));

    if (fs.existsSync(entryFilePath)) {
      require(entryFilePath)(serverApi);
    }
  }
}

module.exports = {
  resolveRouterPlugins: resolveRouterPlugins
};