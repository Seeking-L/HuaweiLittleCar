"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var express = require('express');

var router = express.Router();

var project = require('../service/project');

var taskService = require('../service/task-service');

var _require = require('../utils/utils'),
    getGlobalItem = _require.getGlobalItem;

var HPM_API = getGlobalItem('api');
router.get('/', function (req, res, next) {
  try {
    return project.getTasks().then(function (json) {
      var result = {
        code: 200
      };
      taskService.setTasks(json);
      var data = Object.keys(taskService.tasks).map(function (t) {
        return _objectSpread(_objectSpread({}, taskService.tasks[t].task.toJSON()), {}, {
          logs: taskService.tasks[t].logs,
          status: taskService.tasks[t].status
        });
      });
      result.data = data;
      res.send(result);
    }).catch(function (err) {
      next(err);
    });
  } catch (err) {
    next(err);
  }
});
router.post('/run', function (req, res, next) {
  try {
    return project.getTasks().then(function (json) {
      taskService.setTasks(json);
      var _req$body = req.body,
          taskName = _req$body.taskName,
          taskOptions = _req$body.taskOptions;
      return taskService.run(taskName, taskOptions).then(function () {
        var result = {
          code: 200,
          message: 'success'
        };
        res.send(result);
      });
    }).catch(function (err) {
      next(err);
    });
  } catch (err) {
    next(err);
  }
});
router.post('/stop', function (req, res, next) {
  try {
    return project.getTasks().then(function (json) {
      taskService.setTasks(json);
      var taskName = req.body.taskName;
      return taskService.stop(taskName).then(function (code) {
        if (code === 0) {
          var result = {
            code: 200,
            message: 'success'
          };
          res.send(result);
        } else {
          var err = {
            code: 500,
            message: 'failed'
          };
          res.send(err);
        }
      });
    }).catch(function (err) {
      next(err);
    });
  } catch (err) {
    next(err);
  }
});
router.post('/logs/clear', function (req, res, next) {
  try {
    return project.getTasks().then(function (json) {
      taskService.setTasks(json);
      var taskName = req.body.taskName;
      taskService.clearlog(taskName);
      var result = {
        code: 200,
        message: 'success'
      };
      res.send(result);
    }).catch(function (err) {
      next(err);
    });
  } catch (err) {
    next(err);
  }
});
router.post('/:name', function (req, res, next) {
  try {
    var name = req.params.name;
    var script = req.body.script;
    var result = {
      code: 200,
      message: 'success'
    };
    project.getTasks().then(function (tasks) {
      var sameTask = tasks.find(function (task) {
        return task.name === name && task.type === 'plugin';
      });

      if (sameTask) {
        throw new Error("same script task name \"".concat(name, "\" is not allow, check plugins and bundle scripts"));
      }

      var bundleJson = HPM_API.getManifest().json();

      if (!bundleJson.scripts) {
        bundleJson.scripts = {};
      }

      bundleJson.scripts[name] = script;
      HPM_API.save(bundleJson);
      res.send(result);
    }).catch(function (err) {
      next(err);
    });
  } catch (err) {
    next(err);
  }
});
router.delete('/:name', function (req, res, next) {
  try {
    var name = req.params.name;
    var result = {
      code: 200,
      message: 'success'
    };
    var bundleJson = HPM_API.getManifest().json();

    if (!bundleJson.scripts) {
      bundleJson.scripts = {};
    }

    bundleJson.scripts[name] = undefined;
    HPM_API.save(bundleJson);
    taskService.removeTask(name);
    res.send(result);
  } catch (err) {
    next(err);
  }
});
module.exports = router;