"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var _require = require('../utils/constant'),
    SocketType = _require.SocketType;

var Message = /*#__PURE__*/function () {
  function Message(json) {
    _classCallCheck(this, Message);

    this.fromJson(json);
  }

  _createClass(Message, [{
    key: "fromJson",
    value: function fromJson() {
      var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.id = json.id;
      this.type = json.type;
      this.payload = json.payload;
      this.data = json.data;
    }
  }, {
    key: "isStart",
    value: function isStart() {
      return this.id && this.type === SocketType.START && this.payload;
    }
  }, {
    key: "isStop",
    value: function isStop() {
      return this.id && this.type === SocketType.STOP;
    }
  }, {
    key: "isChecked",
    value: function isChecked() {
      return this.id && this.type === SocketType.CHECKED;
    }
  }]);

  return Message;
}();

module.exports = Message;